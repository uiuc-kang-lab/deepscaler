{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    def solve(board):\n        # Find the next empty cell\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '.':\n                    # Determine possible numbers\n                    used = set()\n                    # Check row\n                    for num in board[i]:\n                        used.add(num)\n                    # Check column\n                    for num in [board[r][j] for r in range(9)]:\n                        used.add(num)\n                    # Check subgrid\n                    start_row = (i // 3) * 3\n                    start_col = (j // 3) * 3\n                    for num in [board[r][c] for r in range(start_row, start_row + 3) for c in range(start_col, start_col + 3)]:\n                        used.add(num)\n                    possible = [num for num in range(1, 10) if num not in used]\n                    # Try each possible number\n                    for num in possible:\n                        # Create a copy of the board\n                        new_board = [row.copy() for row in board]\n                        new_board[i][j] = num\n                        # Recursively solve the new board\n                        solution = solve(new_board)\n                        if solution is not None:\n                            return solution\n                    # If no solution found, backtrack\n                    return None\n        # No empty cells found\n        return board\n\n    solve(board)",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}