{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    blocked = set(blocked_cells)\n    if (1, 1) in blocked or (n, m) in blocked:\n        return False\n\n    queue = deque()\n    queue.append((1, 1))\n    visited = set()\n    visited.add((1, 1))\n\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    while queue:\n        i, j = queue.popleft()\n        for dx, dy in directions:\n            x = i + dx\n            y = j + dy\n            if 1 <= x <= n and 1 <= y <= m:\n                if (x, y) == (n, m):\n                    return True\n                if (x, y) not in visited and (x, y) not in blocked:\n                    visited.add((x, y))\n                    queue.append((x, y))\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}