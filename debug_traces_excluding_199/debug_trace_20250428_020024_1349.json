{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    if n == 0 or m == 0:\n        return False  # Though per problem statement, n and m are at least 1.\n    \n    start = (0, 0)\n    end = (n-1, m-1)\n    \n    if start in blocked_cells or end in blocked_cells:\n        return False\n    \n    blocked_set = set(blocked_cells)\n    \n    queue = deque()\n    queue.append(start)\n    visited = set()\n    visited.add(start)\n    \n    while queue:\n        x, y = queue.popleft()\n        \n        # Check if current cell is the end\n        if x == end[0] and y == end[1]:\n            return True\n        \n        # Explore neighbors\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_x = x + dx\n            new_y = y + dy\n            if 0 <= new_x < n and 0 <= new_y < m:\n                if (new_x, new_y) not in visited and (new_x, new_y) not in blocked_set:\n                    visited.add((new_x, new_y))\n                    queue.append((new_x, new_y))\n    \n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}