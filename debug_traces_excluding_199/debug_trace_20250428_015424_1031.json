{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    # Convert dots to 0s\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == '.':\n                board[i][j] = 0\n\n    while True:\n        min_count = 9\n        next_cell = None\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    possible = []\n                    # Check row\n                    row = board[i]\n                    row_numbers = set(row)\n                    possible.extend([n for n in range(1, 10) if n not in row_numbers])\n                    # Check column\n                    col = [board[x][j] for x in range(9)]\n                    col_numbers = set(col)\n                    possible.extend([n for n in range(1, 10) if n not in col_numbers])\n                    # Check subgrid\n                    subgrid_i = (i // 3) * 3\n                    subgrid_j = (j // 3) * 3\n                    for x in range(subgrid_i, subgrid_i + 3):\n                        for y in range(subgrid_j, subgrid_j + 3):\n                            num = board[x][y]\n                            if num != 0:\n                                possible.remove(num)\n                    count = len(possible)\n                    if count < min_count:\n                        min_count = count\n                        next_cell = (i, j)\n                    elif count == min_count:\n                        if next_cell is None:\n                            next_cell = (i, j)\n        if next_cell is None:\n            break  # No empty cells left, though input should be valid\n        else:\n            num = possible.pop(0)\n            board[next_cell[0]][next_cell[1]] = num\n\n    return board",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}