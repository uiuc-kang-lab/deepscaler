{
  "data_source": "kodcode",
  "model_code": "import sys\nfrom collections import Counter\n\nlines = []\nwhile True:\n    line = sys.stdin.readline()\n    stripped_line = line.rstrip('\\n')\n    if stripped_line == '.':\n        break\n    if not stripped_line:\n        continue  # Skip empty lines\n    lines.append(stripped_line)\n\nfor line in lines:\n    counts = Counter(line)\n    if not counts:\n        continue  # Skip lines with no characters\n    max_count = max(counts.values())\n    max_letters = [letter for letter, cnt in counts.items() if cnt == max_count]\n    max_letters.sort()\n    print(' '.join(max_letters))",
  "tests": "from solution import letter_frequency_analyzer\n\ndef test_single_test_case_hello():\n    input_lines = [\"hello\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\"]\n\ndef test_single_test_case_abracadabra():\n    input_lines = [\"abracadabra\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_single_test_case_mississippi():\n    input_lines = [\"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"i s\"]\n\ndef test_multiple_test_cases():\n    input_lines = [\"hello\", \"abracadabra\", \"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\", \"a\", \"i s\"]\n\ndef test_all_letters_same():\n    input_lines = [\"aaaaaa\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_tie_in_frequencies():\n    input_lines = [\"aabbcc\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a b c\"]"
}