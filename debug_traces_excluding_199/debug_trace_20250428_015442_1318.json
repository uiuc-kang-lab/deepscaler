{
  "data_source": "kodcode",
  "model_code": "def analyze_sequence(sequences):\n    result = []\n    for seq in sequences:\n        if len(set(seq)) == 1:\n            result.append(\"STEADY\")\n        else:\n            result.append(\"FLUCTUATING\")\n    return result",
  "tests": "def test_analyze_sequence_steady_case():\n    assert analyze_sequence([[1, 3, 5, 7]]) == [\"STEADY\"]\n\ndef test_analyze_sequence_fluctuating_case():\n    assert analyze_sequence([[4, 2, -2, -5]]) == [\"FLUCTUATING\"]\n\ndef test_analyze_sequence_mixed_cases():\n    assert analyze_sequence([\n        [1, 3, 5, 7],\n        [4, 2, -2, -5]\n    ]) == [\"STEADY\", \"FLUCTUATING\"]\n\ndef test_analyze_sequence_edge_case_two_elements():\n    assert analyze_sequence([[1, 5]]) == [\"STEADY\"]\n\ndef test_analyze_sequence_same_elements():\n    assert analyze_sequence([[3, 3, 3, 3]]) == [\"STEADY\"]\n    \n    assert analyze_sequence([[2, 2]]) == [\"STEADY\"]"
}         # Check if new position is within bounds and not visited and not blocked\n            if 0 <= new_row < n and 0 <= new_col < m:\n                if not visited[new_row][new_col]:\n                    if (new_row, new_col) not in blocked:\n                        visited[new_row][new_col] = True\n                        queue.append((new_row, new_col))\n    \n    # If queue is empty and target not found\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}