{
  "data_source": "kodcode",
  "model_code": "from collections import defaultdict, deque\n\ndef max_unique_cities(N, M, cities, trains):\n    # Build the connections dictionary\n    connections = defaultdict(list)\n    for city1, city2, distance in trains:\n        connections[city1].append((city2, distance))\n        connections[city2].append((city1, distance))\n    \n    max_cities = 1  # Each city is a possible starting point\n\n    for start_city in range(1, N + 1):\n        mask = 1 << (start_city - 1)\n        if (mask & (1 << (start_city - 1))) == 0:\n            # BFS using a queue to explore all possible paths\n            queue = deque()\n            queue.append((start_city, mask, 0))\n            visited_masks = {}\n\n            while queue:\n                current, mask, path_length = queue.popleft()\n\n                # Check if current city hasn't been visited yet\n                if (mask & (1 << (current - 1))) == 0:\n                    if current not in visited_masks:\n                        if path_length > max_cities:\n                            max_cities = path_length\n                        # Explore all connections\n                        for neighbor, distance in connections[current]:\n                            new_mask = mask | (1 << (neighbor - 1))\n                            if neighbor not in visited_masks:\n                                queue.append((neighbor, new_mask, path_length + 1))\n                                visited_masks[neighbor] = new_mask\n                            else:\n                                # Neighbor is already visited, backtrack\n                                pass\n                else:\n                    # Neighbor is already visited, backtrack\n                    pass\n\n            # End of while loop\n        # End of if\n\n    return max_cities",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}