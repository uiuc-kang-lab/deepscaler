{
  "data_source": "kodcode",
  "model_code": "n = int(input())\nthicknesses = list(map(int, input().split()))\nT = int(input())\n\nmax_thickness = T\ndp = [-1] * (max_thickness + 1)\ndp[0] = 0\n\nfor t in thicknesses:\n    for i in range(max_thickness, t - 1, -1):\n        if dp[i - t] != -1:\n            if dp[i] == -1 or dp[i - t] + 1 > dp[i]:\n                dp[i] = dp[i - t] + 1\n\nmax_books = 0\nfor i in range(max_thickness, -1, -1):\n    if dp[i] != -1:\n        max_books = i\n        break\n\nprint(max_books)",
  "tests": "def test_single_book():\n    assert max_books_on_shelf(1, [100], 50) == 0\n    assert max_books_on_shelf(1, [30], 30) == 1\n\ndef test_multiple_books():\n    assert max_books_on_shelf(5, [10, 20, 30, 40, 50], 100) == 4\n    assert max_books_on_shelf(3, [15, 5, 10], 30) == 3\n    assert max_books_on_shelf(4, [25, 10, 30, 20], 50) == 2\n\ndef test_maximum_thickness():\n    assert max_books_on_shelf(10, [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 100) == 10\n    assert max_books_on_shelf(6, [50, 20, 20, 10, 10, 10], 100) == 5\n    \n# Running these tests will require the function to be placed into a module named 'solution',\n# and then you can run pytest on this file containing the test cases."
}olve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}