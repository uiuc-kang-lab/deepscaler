{
  "data_source": "kodcode",
  "model_code": "from collections import deque\nimport sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    t = int(data[idx])\n    idx += 1\n    directions = [(-1, -1), (-1, 0), (-1, 1),\n                  (0, -1),          (0, 1),\n                  (1, -1),  (1, 0), (1, 1)]\n    for _ in range(t):\n        n = int(data[idx])\n        m = int(data[idx+1])\n        idx +=2\n        grid = []\n        for i in range(n):\n            row = list(map(int, data[idx:idx+m]))\n            grid.append(row)\n            idx +=m\n        max_sum = 0\n        for i in range(n):\n            for j in range(m):\n                current_sum = 0\n                visited = set()\n                queue = deque()\n                queue.append((i, j))\n                visited.add((i, j))\n                while queue:\n                    x, y = queue.popleft()\n                    current_sum += grid[x][y]\n                    for dx, dy in directions:\n                        newx = x + dx\n                        newy = y + dy\n                        if 0 <= newx < n and 0 <= newy < m:\n                            if (newx, newy) not in visited:\n                                visited.add((newx, newy))\n                                queue.append((newx, newy))\n                if current_sum > max_sum:\n                    max_sum = current_sum\n        print(max_sum)\n\nif __name__ == \"__main__\":\n    main()",
  "tests": "from solution import max_coins\n\ndef test_max_coins():\n    assert max_coins(2, [\n        (3, 3, [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]),\n        (2, 2, [\n            [1, 2],\n            [0, 3]\n        ]),\n    ]) == [45, 6]\n\ndef test_single_cell_grid():\n    assert max_coins(1, [\n        (1, 1, [\n            [5]\n        ])\n    ]) == [5]\n\ndef test_all_zero_grid():\n    assert max_coins(1, [\n        (3, 3, [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0]\n        ])\n    ]) == [0]\n\ndef test_single_row_grid():\n    assert max_coins(1, [\n        (1, 5, [\n            [1, 2, 3, 4, 5]\n        ])\n    ]) == [15]\n\ndef test_single_column_grid():\n    assert max_coins(1, [\n        (5, 1, [\n            [1],\n            [2],\n            [3],\n            [4],\n            [5]\n        ])\n    ]) == [15]"
}