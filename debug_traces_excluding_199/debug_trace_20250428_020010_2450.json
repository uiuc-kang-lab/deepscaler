{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    empty_cell = None\n    for row in range(9):\n        for col in range(9):\n            if board[row][col] == '.':\n                empty_cell = (row, col)\n                break\n        if empty_cell:\n            break\n    if not empty_cell:\n        return True  # All cells filled\n\n    row, col = empty_cell\n\n    for num in range(1, 10):\n        if is_valid(board, row, col, num):\n            board[row][col] = num\n            if solve_sudoku(board):\n                return True\n            board[row][col] = '.'  # Backtrack\n    return False\n\ndef is_valid(board, row, col, num):\n    # Check if 'num' is not present in the same row\n    for num_in_row in board[row]:\n        if num_in_row == num:\n            return False\n\n    # Check if 'num' is not present in the same column\n    for col_num in range(9):\n        if board[col_num][col] == num:\n            return False\n\n    # Check if 'num' is not present in the same 3x3 subgrid\n    subgrid_row = row // 3\n    subgrid_col = col // 3\n    for i in range(3):\n        for j in range(3):\n            if board[i + subgrid_row][j + subgrid_col] == num:\n                return False\n\n    return True",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}