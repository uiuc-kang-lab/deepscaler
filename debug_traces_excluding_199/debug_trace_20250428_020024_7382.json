{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    if n == 0 or m == 0:\n        return False  # Though constraints say n and m are >=1\n    \n    # Convert to 0-based indices\n    target = (n-1, m-1)\n    \n    # Create a set for blocked cells for O(1) lookups\n    blocked = set(blocked_cells)\n    \n    # Check if starting cell is blocked\n    if target in blocked:\n        return False\n    \n    visited = [[False for _ in range(m)] for _ in range(n)]\n    queue = deque()\n    queue.append((0, 0))\n    visited[0][0] = True\n    \n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while queue:\n        i, j = queue.popleft()\n        \n        for di, dj in directions:\n            ni = i + di\n            nj = j + dj\n            \n            # Check if the new position is within bounds\n            if 0 <= ni < n and 0 <= nj < m:\n                # Skip if already visited\n                if visited[ni][nj]:\n                    continue\n                # Check if the new position is the target\n                if ni == target[0] and nj == target[1]:\n                    return True\n                # Mark as visited and add to queue\n                visited[ni][nj] = True\n                queue.append((ni, nj))\n    \n    # If queue is empty and target not reached\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}