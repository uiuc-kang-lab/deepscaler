{
  "data_source": "kodcode",
  "model_code": "def update_inventory(n, inventory_list, m, orders_list):\n    # Read the N items and store them in input_list in the order they are read\n    input_list = []\n    for _ in range(n):\n        name, qty = input().split()\n        input_list.append((name, qty))\n    \n    # Process each of the M orders\n    for _ in range(m):\n        name, qty = input().split()\n        if name in input_list:\n            # Find the index of the item in input_list\n            item = input_list.index((name, qty))\n            available = inventory[input_list[item[0]]]  # Get the current quantity\n            new_available = available - qty\n            if new_available < 0:\n                new_available = 0\n            # Update the inventory\n            inventory[input_list[item[0]]] = new_available\n    \n    # Output the inventory in the order they were read\n    for item in input_list:\n        print(f\"{item[0]} {inventory[item[0]]}\")\n    \nif __name__ == \"__main__\":\n    # Read input\n    n = int(input())\n    inventory_list = []\n    for _ in range(n):\n        name, qty = input().split()\n        inventory_list.append((name, qty))\n    \n    m = int(input())\n    orders_list = []\n    for _ in range(m):\n        name, qty = input().split()\n        orders_list.append((name, qty))\n    \n    # Process and update inventory\n    update_inventory(n, inventory_list, m, orders_list)",
  "tests": "def test_update_inventory():\n    n = 4\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20),\n        (\"grape\", 10)\n    ]\n    m = 3\n    orders_list = [\n        (\"apple\", 60),\n        (\"banana\", 10),\n        (\"grape\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 20),\n        (\"orange\", 20),\n        (\"grape\", 5)\n    ]\n    assert result == expected\n\ndef test_no_orders():\n    n = 2\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    m = 0\n    orders_list = []\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    assert result == expected\n\ndef test_no_inventory():\n    n = 0\n    inventory_list = []\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = []\n    assert result == expected\n\ndef test_more_orders_than_stock():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 15),\n        (\"banana\", 10)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_exact_stock_match():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_unordered_orders():\n    n = 3\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20)\n    ]\n    m = 3\n    orders_list = [\n        (\"banana\", 20),\n        (\"orange\", 15),\n        (\"apple\", 30)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 20),\n        (\"banana\", 10),\n        (\"orange\", 5)\n    ]\n    assert result == expected"
}