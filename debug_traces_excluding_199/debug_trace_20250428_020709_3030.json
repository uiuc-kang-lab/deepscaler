{
  "data_source": "kodcode",
  "model_code": "def max_unique_cities(N: int, M: int, cities: List[int], trains: List[Tuple[int, int, int]]) -> int:\n    cities_dict = {city: idx for idx, city in enumerate(cities)}\n    max_count = 1  # At least each city can be visited alone\n\n    for start in cities_dict:\n        visited = set()\n        visited.add(start)\n        max_in_path = 1\n\n        def dfs(current, last_dist):\n            nonlocal max_count\n            if len(visited) == max_count:\n                return 0\n            for train in trains:\n                u, v, d = train\n                if current == u:\n                    if last_dist > 0:\n                        continue\n                    if v not in visited:\n                        new_visited = visited.copy()\n                        new_visited.add(v)\n                        new_last_dist = last_dist + d\n                        if new_last_dist <= d:\n                            result = dfs(v, new_last_dist)\n                            if result > max_in_path:\n                                max_in_path = result\n                elif current == v:\n                    if last_dist > 0:\n                        continue\n                    if u not in visited:\n                        new_visited = visited.copy()\n                        new_visited.add(u)\n                        new_last_dist = last_dist + d\n                        if new_last_dist <= d:\n                            result = dfs(u, new_last_dist)\n                            if result > max_in_path:\n                                max_in_path = result\n            return max_in_path\n\n        dfs(start, 0)\n        if max_in_path > max_count:\n            max_count = max_in_path\n\n    return max_count",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}