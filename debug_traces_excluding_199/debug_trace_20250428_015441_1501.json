{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s: str) -> str:\n    if not s:\n        return \"\"\n    \n    max_length = 0\n    start = -1\n    end = -1\n    max_palindrome = \"\"\n    \n    for i in range(len(s)):\n        left = i - 1\n        right = i + 1\n        \n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            current_length = right - left + 1\n            if current_length > max_length:\n                max_length = current_length\n                max_palindrome = s[left:right+1]\n            left -= 1\n            right += 1\n        \n        if max_length > 0:\n            if max_palindrome == \"\":\n                max_palindrome = s[start:end+1]\n            else:\n                if s[left:right+1] > max_palindrome:\n                    max_palindrome = s[left:right+1]\n    \n    return max_palindrome if max_palindrome else \"\"",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}