{
  "data_source": "kodcode",
  "model_code": "def process_inventory():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n\n    n = int(input[ptr])\n    ptr += 1\n\n    operations = []\n    for _ in range(n):\n        op_type = input[ptr]\n        item = input[ptr + 1]\n        qty = int(input[ptr + 2])\n        ptr += 3\n        operations.append((op_type, item, qty))\n\n    # Initialize stock dictionary\n    stock = {}\n    for op, item, qty in operations:\n        if item in stock:\n            stock[item] += qty\n        else:\n            stock[item] = qty\n\n    q = int(input[ptr])\n    ptr += 1\n\n    for _ in range(q):\n        item = input[ptr]\n        ptr += 1\n        if item in stock:\n            if stock[item] > 0:\n                print(\"in stock\")\n            else:\n                print(\"out of stock\")\n        else:\n            print(\"out of stock\")\n\nif __name__ == \"__main__\":\n    process_inventory()",
  "tests": "from solution import process_inventory\n\ndef test_example_case():\n    n = 5\n    operations = [\n        \"+item1 300\",\n        \"-item2 100\",\n        \"+item2 150\",\n        \"-item1 200\",\n        \"-item2 200\"\n    ]\n    q = 3\n    queries = [\"item1\", \"item2\", \"item3\"]\n    expected_output = [\"in stock\", \"out of stock\", \"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_single_operation():\n    n = 1\n    operations = [\"+item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_zero_quantity():\n    n = 2\n    operations = [\"+item1 100\", \"-item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_negative_stock():\n    n = 2\n    operations = [\"-item1 100\", \"+item1 50\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_multiple_items():\n    n = 3\n    operations = [\"+item1 200\", \"+item2 150\", \"-item2 100\"]\n    q = 2\n    queries = [\"item1\", \"item2\"]\n    expected_output = [\"in stock\", \"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output"
}