{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    # Make a deep copy of the input board to avoid modifying the original\n    grid = [r.copy() for r in board]\n    while True:\n        changed = False\n        for row in range(9):\n            for col in range(9):\n                if grid[row][col] == '.':\n                    # Calculate the subgrid boundaries\n                    subgrid_row = (row // 3) * 3\n                    subgrid_col = (col // 3) * 3\n                    # Collect all numbers in the subgrid\n                    subgrid = []\n                    for i in range(3):\n                        for j in range(3):\n                            subgrid.append(grid[subgrid_row + i][subgrid_col + j])\n                    # Get row and column numbers\n                    row_nums = set(grid[row])\n                    col_nums = set(grid[i][col] for i in range(9))\n                    # Combine all numbers\n                    all_nums = row_nums.union(col_nums).union(subgrid)\n                    # Find possible numbers\n                    possible = [num for num in range(1, 10) if num not in all_nums]\n                    if len(possible) == 1:\n                        grid[row][col] = possible[0]\n                        changed = True\n        # Check if any changes were made in this iteration\n        if not changed:\n            break\n    return grid",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}, '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}