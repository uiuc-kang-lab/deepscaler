{
  "data_source": "kodcode",
  "model_code": "def update_inventory(n, inventory_list, m, orders_list):\n    # Initialize inventory dictionary\n    inventory = {}\n    for item, qty in inventory_list:\n        inventory[item] = qty\n    \n    # Process each sales order\n    for item, qty in orders_list:\n        if item in inventory:\n            inventory[item] -= qty\n            if inventory[item] < 0:\n                inventory[item] = 0\n    \n    # Output the updated inventory in the original order\n    for item in inventory_list:\n        print(f\"{item} {inventory[item]}\")\n    \nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    n = int(input[idx].split()[0])\n    idx += 1\n    inventory_list = []\n    for _ in range(n):\n        line = input[idx].strip().split()\n        idx += 1\n        if idx < len(input):\n            item = line[0]\n            qty = int(line[1])\n            inventory_list.append((item, qty))\n    idx = 0\n    m = int(input[idx].split()[0])\n    idx += 1\n    orders_list = []\n    for _ in range(m):\n        line = input[idx].strip().split()\n        idx += 1\n        item = line[0]\n        qty = int(line[1])\n        orders_list.append((item, qty))\n    update_inventory(n, inventory_list, m, orders_list)",
  "tests": "def test_update_inventory():\n    n = 4\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20),\n        (\"grape\", 10)\n    ]\n    m = 3\n    orders_list = [\n        (\"apple\", 60),\n        (\"banana\", 10),\n        (\"grape\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 20),\n        (\"orange\", 20),\n        (\"grape\", 5)\n    ]\n    assert result == expected\n\ndef test_no_orders():\n    n = 2\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    m = 0\n    orders_list = []\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    assert result == expected\n\ndef test_no_inventory():\n    n = 0\n    inventory_list = []\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = []\n    assert result == expected\n\ndef test_more_orders_than_stock():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 15),\n        (\"banana\", 10)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_exact_stock_match():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_unordered_orders():\n    n = 3\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20)\n    ]\n    m = 3\n    orders_list = [\n        (\"banana\", 20),\n        (\"orange\", 15),\n        (\"apple\", 30)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 20),\n        (\"banana\", 10),\n        (\"orange\", 5)\n    ]\n    assert result == expected"
}