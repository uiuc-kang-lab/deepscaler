{
  "data_source": "kodcode",
  "model_code": "import math\n\ndef max_time_to_report_issue(n: int, r: int, t: int, coordinates: List[Tuple[int, int]]) -> int:\n    if r == 0:\n        all_same = all((x, y) == coordinates[0] for (x, y) in coordinates)\n        if all_same:\n            return 0\n        else:\n            return -1\n    else:\n        node1 = coordinates[0]\n        max_time = 0\n        for node in coordinates:\n            x1, y1 = node1\n            x2, y2 = node\n            dx = x2 - x1\n            dy = y2 - y1\n            distance = math.hypot(dx, dy)\n            time = math.ceil(distance / r)\n            if time > max_time:\n                max_time = time\n        if max_time <= t:\n            return max_time\n        else:\n            return -1",
  "tests": "from solution import max_time_to_report_issue\n\ndef test_example_1():\n    n = 4\n    r = 5\n    t = 10\n    coordinates = [(0, 0), (3, 4), (-3, -4), (6, 8)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 2\n\ndef test_example_2():\n    n = 3\n    r = 2\n    t = 5\n    coordinates = [(0, 0), (5, 5), (-1, -1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1\n\ndef test_single_node():\n    n = 1\n    r = 2\n    t = 0\n    coordinates = [(1, 1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 0\n\ndef test_nodes_all_reachable():\n    n = 3\n    r = 5\n    t = 2\n    coordinates = [(0, 0), (3, 4), (3, -4)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 1\n\ndef test_impossible_reach():\n    n = 3\n    r = 1\n    t = 5\n    coordinates = [(0, 0), (10, 10), (20, 20)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1"
}