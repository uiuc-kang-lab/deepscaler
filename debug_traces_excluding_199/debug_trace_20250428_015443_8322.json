{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    # Create a grid of size n x m, initialized to False (unblocked)\n    grid = [[False for _ in range(m)] for _ in range(n)]\n    \n    # Mark blocked cells\n    for (i, j) in blocked_cells:\n        grid[i-1][j-1] = True  # Convert to 0-based indices\n    \n    # Check if start or end is blocked\n    if (0, 0) in blocked_cells:\n        return False\n    if (n-1, m-1) in blocked_cells:\n        return False\n    \n    # Initialize BFS\n    visited = set()\n    queue = deque()\n    queue.append((0, 0))\n    visited.add((0, 0))\n    \n    # Define the four possible directions\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while queue:\n        i, j = queue.popleft()\n        \n        for d in directions:\n            ni, nj = i + d[0], j + d[1]\n            \n            # Check if the new cell is within bounds and unblocked\n            if 0 <= ni < n and 0 <= nj < m and not grid[ni][nj]:\n                if (ni, nj) not in visited:\n                    visited.add((ni, nj))\n                    queue.append((ni, nj))\n    \n    # Check if end point was reached\n    return (n-1, m-1) in visited",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}