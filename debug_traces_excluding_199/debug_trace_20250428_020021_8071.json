{
  "data_source": "kodcode",
  "model_code": "n = int(input())\noperations = []\nfor _ in range(n):\n    op = input().strip()\n    operations.append(op)\n\nfrom collections import defaultdict\n\nquantity = defaultdict(int)\n\nfor op in operations:\n    parts = op.split()\n    if parts[0] == '+':\n        id = parts[1]\n        qty = int(parts[2])\n        quantity[id] += qty\n    else:\n        id = parts[1]\n        qty = int(parts[2])\n        quantity[id] -= qty\n\nq = int(input())\nfor _ in range(q):\n    id = input().strip()\n    if quantity[id] > 0:\n        print(\"in stock\")\n    else:\n        print(\"out of stock\")",
  "tests": "from solution import process_inventory\n\ndef test_example_case():\n    n = 5\n    operations = [\n        \"+item1 300\",\n        \"-item2 100\",\n        \"+item2 150\",\n        \"-item1 200\",\n        \"-item2 200\"\n    ]\n    q = 3\n    queries = [\"item1\", \"item2\", \"item3\"]\n    expected_output = [\"in stock\", \"out of stock\", \"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_single_operation():\n    n = 1\n    operations = [\"+item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_zero_quantity():\n    n = 2\n    operations = [\"+item1 100\", \"-item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_negative_stock():\n    n = 2\n    operations = [\"-item1 100\", \"+item1 50\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_multiple_items():\n    n = 3\n    operations = [\"+item1 200\", \"+item2 150\", \"-item2 100\"]\n    q = 2\n    queries = [\"item1\", \"item2\"]\n    expected_output = [\"in stock\", \"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output"
}