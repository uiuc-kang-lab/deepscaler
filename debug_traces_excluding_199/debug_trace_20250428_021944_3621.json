{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s: str) -> str:\n    def expand_around_center(left: int, right: int) -> tuple:\n        start = left\n        end = right\n        max_len = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            max_len += 1\n            start = left\n            end = right\n            left -= 1\n            right += 1\n        return (max_len, s[start:end+1])\n\n    max_len = 0\n    max_sub = \"\"\n    for i in range(len(s)):\n        # Check for odd length palindromes\n        len1, sub1 = expand_around_center(i, i)\n        if len1 > max_len:\n            max_len = len1\n            max_sub = sub1\n        # Check for even length palindromes\n        len2, sub2 = expand_around_center(i, i + 1)\n        if len2 > max_len:\n            max_len = len2\n            max_sub = sub2\n    return max_sub",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}