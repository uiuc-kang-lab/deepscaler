{
  "data_source": "kodcode",
  "model_code": "def max_time_to_report_issue(n: int, r: int, t: int, coordinates: List[Tuple[int, int]]) -> int:\n    node0 = coordinates[0]\n    max_distance = 0.0\n    found = False\n    \n    for coord in coordinates[1:]:\n        dx = coord[0] - node0[0]\n        dy = coord[1] - node0[1]\n        distance = (dx ** 2 + dy ** 2) ** 0.5\n        \n        if distance > max_distance:\n            max_distance = distance\n        \n        if distance <= r:\n            found = True\n            break\n    \n    if not found:\n        return -1\n    \n    required_time = (max_distance + r - 1) // r\n    \n    if required_time <= t:\n        return required_time\n    else:\n        return -1",
  "tests": "from solution import max_time_to_report_issue\n\ndef test_example_1():\n    n = 4\n    r = 5\n    t = 10\n    coordinates = [(0, 0), (3, 4), (-3, -4), (6, 8)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 2\n\ndef test_example_2():\n    n = 3\n    r = 2\n    t = 5\n    coordinates = [(0, 0), (5, 5), (-1, -1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1\n\ndef test_single_node():\n    n = 1\n    r = 2\n    t = 0\n    coordinates = [(1, 1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 0\n\ndef test_nodes_all_reachable():\n    n = 3\n    r = 5\n    t = 2\n    coordinates = [(0, 0), (3, 4), (3, -4)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 1\n\ndef test_impossible_reach():\n    n = 3\n    r = 1\n    t = 5\n    coordinates = [(0, 0), (10, 10), (20, 20)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1"
}