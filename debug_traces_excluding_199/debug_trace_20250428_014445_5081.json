{
  "data_source": "kodcode",
  "model_code": "from collections import defaultdict\n\ninventory = defaultdict(int)\n\nn = int(input())\nfor _ in range(n):\n    op = input().strip()\n    sign = op[0]\n    rest = op[1:]\n    parts = rest.split()\n    if len(parts) >= 2:\n        id_part = parts[0]\n        qty = int(parts[1])\n        if sign == '+':\n            inventory[id_part] += qty\n        else:\n            inventory[id_part] -= qty\n\nq = int(input())\nfor _ in range(q):\n    query = input().strip()\n    if query in inventory:\n        print(\"in stock\" if inventory[query] > 0 else \"out of stock\")\n    else:\n        print(\"out of stock\")",
  "tests": "from solution import process_inventory\n\ndef test_example_case():\n    n = 5\n    operations = [\n        \"+item1 300\",\n        \"-item2 100\",\n        \"+item2 150\",\n        \"-item1 200\",\n        \"-item2 200\"\n    ]\n    q = 3\n    queries = [\"item1\", \"item2\", \"item3\"]\n    expected_output = [\"in stock\", \"out of stock\", \"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_single_operation():\n    n = 1\n    operations = [\"+item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_zero_quantity():\n    n = 2\n    operations = [\"+item1 100\", \"-item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_negative_stock():\n    n = 2\n    operations = [\"-item1 100\", \"+item1 50\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_multiple_items():\n    n = 3\n    operations = [\"+item1 200\", \"+item2 150\", \"-item2 100\"]\n    q = 2\n    queries = [\"item1\", \"item2\"]\n    expected_output = [\"in stock\", \"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output"
}