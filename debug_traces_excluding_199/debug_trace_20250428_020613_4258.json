{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s: str) -> str:\n    if len(s) == 0:\n        return \"\"\n    max_len = 0\n    longest_start = 0\n    longest_end = 0\n    n = len(s)\n    \n    for i in range(n):\n        # Check for odd length palindromes\n        l, r = i - 1, i + 1\n        while l >= 0 and r < n and s[l] == s[r]:\n            current_len = r - l + 1\n            if current_len > max_len:\n                max_len = current_len\n                longest_start = l\n                longest_end = r\n            l -= 1\n            r += 1\n        \n        # Check for even length palindromes\n        l, r = i, i + 1\n        while l >= 0 and r < n and s[l] == s[r]:\n            current_len = r - l + 1\n            if current_len > max_len:\n                max_len = current_len\n                longest_start = l\n                longest_end = r\n            l -= 1\n            r += 1\n    \n    return s[longest_start:longest_end + 1]",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}