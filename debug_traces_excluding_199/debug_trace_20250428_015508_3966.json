{
  "data_source": "kodcode",
  "model_code": "def letter_frequency_analyzer(input_lines):\n    import sys\n    lines = [line.strip() for line in sys.stdin if line.strip() != '']\n    for s in lines[:-1]:\n        counts = {chr(ord('a') + i): 0 for i in range(26)}\n        for c in s:\n            counts[c] += 1\n        max_freq = max(counts.values())\n        most_common = [k for k, v in counts.items() if v == max_freq]\n        most_common_sorted = sorted(most_common)\n        print(' '.join(most_common_sorted))\n\n# Read all the lines\nlines = [line.strip() for line in sys.stdin if line.strip() != '']\n# Process each line except the last one\nfor s in lines[:-1]:\n    # Initialize frequency dictionary\n    counts = {chr(ord('a') + i): 0 for i in range(26)}\n    # Count occurrences of each character\n    for c in s:\n        counts[c] += 1\n    # Find the maximum frequency\n    max_freq = max(counts.values())\n    # Collect all characters with the maximum frequency\n    most_common = [k for k, v in counts.items() if v == max_freq]\n    # Sort alphabetically\n    most_common_sorted = sorted(most_common)\n    # Print the result\n    print(' '.join(most_common_sorted))\n\n# Print the remaining lines after the last test case\nprint('\\n'.join(lines[-1:]))",
  "tests": "from solution import letter_frequency_analyzer\n\ndef test_single_test_case_hello():\n    input_lines = [\"hello\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\"]\n\ndef test_single_test_case_abracadabra():\n    input_lines = [\"abracadabra\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_single_test_case_mississippi():\n    input_lines = [\"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"i s\"]\n\ndef test_multiple_test_cases():\n    input_lines = [\"hello\", \"abracadabra\", \"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\", \"a\", \"i s\"]\n\ndef test_all_letters_same():\n    input_lines = [\"aaaaaa\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_tie_in_frequencies():\n    input_lines = [\"aabbcc\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a b c\"]"
}