{
  "data_source": "kodcode",
  "model_code": "import sys\n\ndef letter_frequency_analyzer(input_lines):\n    # Read all lines, strip whitespace, and ignore empty lines\n    lines = [line.rstrip() for line in sys.stdin if line.strip() != '']\n    # The last line is the terminator, so take all except last\n    test_cases = lines[:-1]\n    # Process each test case\n    for s in test_cases:\n        # Count frequency of each character\n        freq = {}\n        for c in s:\n            freq[c] = freq.get(c, 0) + 1\n        # Find max frequency\n        max_count = max(freq.values()) if freq else 0\n        # Collect letters with max frequency\n        max_letters = [k for k, v in freq.items() if v == max_count]\n        # Sort the letters alphabetically\n        max_letters.sort()\n        # Print them\n        print(' '.join(max_letters))\n    \nif __name__ == \"__main__\":\n    letter_frequency_analyzer(sys.stdin.read().splitlines())",
  "tests": "from solution import letter_frequency_analyzer\n\ndef test_single_test_case_hello():\n    input_lines = [\"hello\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\"]\n\ndef test_single_test_case_abracadabra():\n    input_lines = [\"abracadabra\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_single_test_case_mississippi():\n    input_lines = [\"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"i s\"]\n\ndef test_multiple_test_cases():\n    input_lines = [\"hello\", \"abracadabra\", \"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\", \"a\", \"i s\"]\n\ndef test_all_letters_same():\n    input_lines = [\"aaaaaa\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_tie_in_frequencies():\n    input_lines = [\"aabbcc\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a b c\"]"
}