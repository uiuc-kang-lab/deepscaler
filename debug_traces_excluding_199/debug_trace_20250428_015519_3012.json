{
  "data_source": "kodcode",
  "model_code": "def reorganizeString(s):\n    from collections import Counter\n    freq = Counter(s)\n    \n    if not freq:\n        return \"\"\n    \n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    \n    if max_freq - min_freq > 1:\n        return \"\"\n    \n    result = []\n    prev_char = None\n    for c in s:\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char != prev_char:\n                result.append(char)\n                prev_char = char\n                break\n    return ''.join(result)",
  "tests": "from solution import reorganizeString\n\ndef test_example1():\n    assert reorganizeString(\"aab\") == \"aba\"\n\ndef test_example2():\n    assert reorganizeString(\"aaab\") == \"\"\n\ndef test_single_character():\n    assert reorganizeString(\"a\") == \"a\"\n    \ndef test_two_characters():\n    assert reorganizeString(\"aa\") == \"\"\n    \ndef test_no_need_to_reorganize():\n    assert reorganizeString(\"abc\") == \"abc\"\n\ndef test_repeating_characters():\n    result = reorganizeString(\"aaabb\")\n    assert result in [\"ababa\", \"babab\"]\n\ndef test_large_string():\n    s = \"a\" * 50000 + \"b\" * 50000\n    result = reorganizeString(s)\n    # Ensure that no two adjacent characters are the same\n    for i in range(len(result) - 1):\n        assert result[i] != result[i + 1]"
}