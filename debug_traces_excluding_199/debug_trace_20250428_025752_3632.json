{
  "data_source": "kodcode",
  "model_code": "import sys\nfrom collections import deque\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, m = map(int, sys.stdin.readline().split())\n        grid = []\n        for _ in range(n):\n            row = list(map(int, sys.stdin.readline().split()))\n            grid.append(row)\n        \n        max_coins = 0\n        \n        for i in range(n):\n            for j in range(m):\n                current = grid[i][j]\n                if current > max_coins:\n                    max_coins = current\n                \n                visited = [[False for _ in range(m)] for _ in range(n)]\n                q = deque()\n                q.append((i, j))\n                visited[i][j] = True\n                \n                current_sum = current\n                while q:\n                    x, y = q.popleft()\n                    for dx in (-1, 0, 1):\n                        for dy in (-1, 0, 1):\n                            if dx == 0 and dy == 0:\n                                continue\n                            nx = x + dx\n                            ny = y + dy\n                            if 0 <= nx < n and 0 <= ny < m:\n                                if not visited[nx][ny]:\n                                    visited[nx][ny] = True\n                                    new_sum = current_sum + grid[nx][ny]\n                                    if new_sum > max_coins:\n                                        max_coins = new_sum\n                                    q.append((nx, ny))\n                \n                if max_coins > n * m:\n                    max_coins = n * m\n        \n        print(max_coins)\n\nif __name__ == \"__main__\":\n    main()",
  "tests": "from solution import max_coins\n\ndef test_max_coins():\n    assert max_coins(2, [\n        (3, 3, [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]),\n        (2, 2, [\n            [1, 2],\n            [0, 3]\n        ]),\n    ]) == [45, 6]\n\ndef test_single_cell_grid():\n    assert max_coins(1, [\n        (1, 1, [\n            [5]\n        ])\n    ]) == [5]\n\ndef test_all_zero_grid():\n    assert max_coins(1, [\n        (3, 3, [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0]\n        ])\n    ]) == [0]\n\ndef test_single_row_grid():\n    assert max_coins(1, [\n        (1, 5, [\n            [1, 2, 3, 4, 5]\n        ])\n    ]) == [15]\n\ndef test_single_column_grid():\n    assert max_coins(1, [\n        (5, 1, [\n            [1],\n            [2],\n            [3],\n            [4],\n            [5]\n        ])\n    ]) == [15]"
}