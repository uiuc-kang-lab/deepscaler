{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    \n    max_length = 0\n    longest = \"\"\n    \n    for i in range(n):\n        // Check for odd length palindromes\n        l, r = i, i\n        while l >= 0 and r < n and s[l] == s[r]:\n            current_length = r - l + 1\n            if current_length > max_length:\n                max_length = current_length\n                longest = s[l:r+1]\n            l -= 1\n            r += 1\n        \n        // Check for even length palindromes, if possible\n        if i < n - 1:\n            l, r = i, i + 1\n            while l >= 0 and r < n and s[l] == s[r]:\n                current_length = r - l + 1\n                if current_length > max_length:\n                    max_length = current_length\n                    longest = s[l:r+1]\n                l -= 1\n                r += 1\n    \n    return longest",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}