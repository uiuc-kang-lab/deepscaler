{
  "data_source": "kodcode",
  "model_code": "def is_path_possible(n, m, blocked_cells):\n    # Convert blocked cells into a set for O(1) access\n    blocked = set(blocked_cells)\n    \n    # Initialize the grid\n    grid = [[True for _ in range(m)] for _ in range(n)]\n    for i, j in blocked:\n        grid[i][j] = False\n    \n    # Check if start or end is blocked\n    if grid[0][0] or grid[n-1][m-1]:\n        return False\n    \n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    from collections import deque\n    visited = set()\n    queue = deque()\n    queue.append((0, 0))\n    visited.add((0, 0))\n    \n    while queue:\n        i, j = queue.popleft()\n        \n        # Check if current cell is the target\n        if i == n - 1 and j == m - 1:\n            return True\n        \n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < m:\n                if not grid[ni][nj] and (ni, nj) not in visited:\n                    visited.add((ni, nj))\n                    queue.append((ni, nj))\n    \n    # If queue is empty and target not found\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}