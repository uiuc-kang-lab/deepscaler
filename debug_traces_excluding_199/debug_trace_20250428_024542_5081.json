{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef max_unique_cities(N, M, cities, trains):\n    cities = [c - 1 for c in cities]\n    adjacency = [[] for _ in range(N)]\n    for a, b, d in trains:\n        adjacency[a].append((b, d))\n        adjacency[b].append((a, d))\n    \n    max_count = 0\n    for start in range(N):\n        max_cities = 1\n        visited_mask = 1 << start\n        queue = deque()\n        queue.append((start, visited_mask, 0))\n        \n        while queue:\n            current_city, visited_mask, last_distance = queue.popleft()\n            current_count = bin(visited_mask).count('1')\n            \n            if current_count > max_count:\n                max_count = current_count\n            \n            for neighbor, distance in adjacency[current_city]:\n                if not (visited_mask & (1 << neighbor)):\n                    new_mask = visited_mask | (1 << neighbor)\n                    new_count = bin(new_mask).count('1')\n                    \n                    if new_count > max_count:\n                        max_count = new_count\n                    \n                    queue.append((neighbor, new_mask, last_distance + distance))\n    \n    return max_count",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}