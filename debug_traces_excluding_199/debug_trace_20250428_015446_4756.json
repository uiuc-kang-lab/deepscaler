{
  "data_source": "kodcode",
  "model_code": "def count_unique_substrings(s):\n    mod1 = 10**18 + 3\n    mod2 = 10**18 + 7\n    base = 911382629\n    n = len(s)\n    prefix_hash1 = [0] * (n + 1)\n    prefix_hash2 = [0] * (n + 1)\n    power1 = [1] * (n + 1)\n    power2 = [1] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prefix_hash1[i] = (prefix_hash1[i-1] * base + ord(s[i-1])) % mod1\n        prefix_hash2[i] = (prefix_hash2[i-1] * base + ord(s[i-1])) % mod2\n        power1[i] = (power1[i-1] * base) % mod1\n        power2[i] = (power2[i-1] * base) % mod2\n    \n    unique1 = set()\n    unique2 = set()\n    for i in range(n):\n        for j in range(i, n):\n            h1 = (prefix_hash1[j+1] - prefix_hash1[i] * power1[j - i + 1]) % mod1\n            if h1 < 0:\n                h1 += mod1\n            unique1.add(h1)\n            \n            h2 = (prefix_hash2[j+1] - prefix_hash2[i] * power2[j - i + 1]) % mod2\n            if h2 < 0:\n                h2 += mod2\n            unique2.add(h2)\n    \n    return len(unique1)",
  "tests": "from solution import count_unique_substrings\n\ndef test_single_character():\n    assert count_unique_substrings('a') == 1\n\ndef test_two_different_characters():\n    assert count_unique_substrings('ab') == 3  # \"a\", \"b\", \"ab\"\n\ndef test_two_same_characters():\n    assert count_unique_substrings('aa') == 2  # \"a\", \"aa\"\n\ndef test_example_case1():\n    assert count_unique_substrings('abc') == 6  # \"a\", \"b\", \"c\", \"ab\", \"bc\", \"abc\"\n\ndef test_example_case2():\n    assert count_unique_substrings('aaa') == 3  # \"a\", \"aa\", \"aaa\"\n\ndef test_all_unique_chars():\n    assert count_unique_substrings('abcd') == 10  # all possible substrings \"a\", \"b\", \"c\", \"d\", \"ab\", \"bc\", \"cd\", \"abc\", \"bcd\", \"abcd\"\n\ndef test_repeated_pattern():\n    assert count_unique_substrings('abab') == 7  # \"a\", \"b\", \"ab\", \"ba\", \"aba\", \"bab\", \"abab\"\n\ndef test_empty_string():\n    assert count_unique_substrings('') == 0  # no substrings"
}