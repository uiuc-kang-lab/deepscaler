{
  "data_source": "kodcode",
  "model_code": "def max_flower_types(N, W, flower_data):\n    # Sort the flower data by their water requirement in ascending order\n    flowers = sorted([(ai, bi) for ai, bi in flower_data], key=lambda x: x[0])\n    \n    total_water = 0\n    count = 0\n    \n    for ai, _ in flowers:\n        if total_water + ai <= W:\n            total_water += ai\n            count += 1\n        else:\n            break\n    \n    return count",
  "tests": "from solution import max_flower_types\n\ndef test_case_1():\n    N = 4\n    W = 10\n    flower_data = [(4, 2), (3, 3), (5, 4), (2, 1)]\n    assert max_flower_types(N, W, flower_data) == 3\n\ndef test_case_2():\n    N = 3\n    W = 5\n    flower_data = [(6, 5), (4, 3), (2, 2)]\n    assert max_flower_types(N, W, flower_data) == 1\n\ndef test_case_3():\n    N = 5\n    W = 15\n    flower_data = [(3, 4), (3, 2), (2, 6), (1, 5), (5, 3)]\n    assert max_flower_types(N, W, flower_data) == 5\n\ndef test_case_4():\n    N = 2\n    W = 10\n    flower_data = [(7, 2), (4, 3)]\n    assert max_flower_types(N, W, flower_data) == 1\n\ndef test_case_5():\n    N = 6\n    W = 8\n    flower_data = [(2, 3), (1, 4), (6, 5), (5, 2), (3, 6), (1, 1)]\n    assert max_flower_types(N, W, flower_data) == 4\n\ndef test_case_6():\n    N = 1\n    W = 3\n    flower_data = [(3, 3)]\n    assert max_flower_types(N, W, flower_data) == 1\n\ndef test_case_7():\n    N = 0\n    W = 0\n    flower_data = []\n    assert max_flower_types(N, W, flower_data) == 0"
}