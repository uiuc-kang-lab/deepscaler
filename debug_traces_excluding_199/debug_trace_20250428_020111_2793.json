{
  "data_source": "kodcode",
  "model_code": "import sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n = int(input[ptr])\n        m = int(input[ptr+1])\n        ptr +=2\n        grid = []\n        for i in range(n):\n            row = list(map(int, input[ptr:ptr+m]))\n            ptr += m\n            grid.append(row)\n        \n        visited = [[False for _ in range(m)] for _ in range(n)]\n        max_sum = 0\n        \n        for i in range(n):\n            for j in range(m):\n                if not visited[i][j]:\n                    sum_component = 0\n                    q = deque()\n                    q.append((i, j))\n                    visited[i][j] = True\n                    sum_component = grid[i][j]\n                    while q:\n                        x, y = q.popleft()\n                        for dx in [-1, 0, 1]:\n                            for dy in [-1, 0, 1]:\n                                if dx == 0 and dy == 0:\n                                    continue\n                                nx = x + dx\n                                ny = y + dy\n                                if 0 <= nx < n and 0 <= ny < m:\n                                    if not visited[nx][ny] and grid[nx][ny] > 0:\n                                        visited[nx][ny] = True\n                                        sum_component += grid[nx][ny]\n                                        q.append((nx, ny))\n                    if sum_component > max_sum:\n                        max_sum = sum_component\n        print(max_sum)\n\nif __name__ == \"__main__\":\n    main()",
  "tests": "from solution import max_coins\n\ndef test_max_coins():\n    assert max_coins(2, [\n        (3, 3, [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]),\n        (2, 2, [\n            [1, 2],\n            [0, 3]\n        ]),\n    ]) == [45, 6]\n\ndef test_single_cell_grid():\n    assert max_coins(1, [\n        (1, 1, [\n            [5]\n        ])\n    ]) == [5]\n\ndef test_all_zero_grid():\n    assert max_coins(1, [\n        (3, 3, [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0]\n        ])\n    ]) == [0]\n\ndef test_single_row_grid():\n    assert max_coins(1, [\n        (1, 5, [\n            [1, 2, 3, 4, 5]\n        ])\n    ]) == [15]\n\ndef test_single_column_grid():\n    assert max_coins(1, [\n        (5, 1, [\n            [1],\n            [2],\n            [3],\n            [4],\n            [5]\n        ])\n    ]) == [15]"
}