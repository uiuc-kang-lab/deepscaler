{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s: str) -> str:\n    if not s:\n        return \"\"\n    \n    max_palindrome = \"\"\n    \n    def expand_around_center(left, right):\n        start = left\n        end = right\n        while start < end:\n            if s[start] == s[end]:\n                start += 1\n                end -= 1\n            else:\n                break\n        return s[start:end+1]\n    \n    for i in range(len(s)):\n        # Odd length palindromes\n        current_palindrome = expand_around_center(i, i)\n        if current_palindrome != \"\":\n            if len(current_palindrome) > len(max_palindrome):\n                max_palindrome = current_palindrome\n        \n        # Even length palindromes\n        current_palindrome = expand_around_center(i, i + 1)\n        if current_palindrome != \"\":\n            if len(current_palindrome) > len(max_palindrome):\n                max_palindrome = current_palindrome\n                \n    return max_palindrome",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}