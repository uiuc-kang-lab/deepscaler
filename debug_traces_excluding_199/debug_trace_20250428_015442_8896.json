{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    # Convert blocked cells to 0-based indices\n    blocked = set()\n    for cell in blocked_cells:\n        row, col = cell\n        blocked.add((row - 1, col - 1))\n    \n    # Check if start or target is blocked\n    start = (0, 0)\n    end = (n - 1, m - 1)\n    if start in blocked or end in blocked:\n        return False\n    \n    # Initialize BFS\n    queue = deque([start])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[start[0]][start[1]] = True\n    \n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while queue:\n        x, y = queue.popleft()\n        \n        # Check if current cell is the target\n        if x == end[0] and y == end[1]:\n            return True\n        \n        for dx, dy in directions:\n            new_x = x + dx\n            new_y = y + dy\n            \n            # Check if new_x and new_y are within grid bounds\n            if 0 <= new_x < n and 0 <= new_y < m:\n                # Check if the new cell is unblocked and not visited\n                if (new_x, new_y) not in blocked and not visited[new_x][new_y]:\n                    visited[new_x][new_y] = True\n                    queue.append((new_x, new_y))\n    \n    # If target is not reached\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}