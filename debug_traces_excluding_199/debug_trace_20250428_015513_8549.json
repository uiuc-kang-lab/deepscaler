{
  "data_source": "kodcode",
  "model_code": "def update_inventory(n, inventory_list, m, orders_list):\n    inventory = {}\n    for _ in range(n):\n        name, qty = input().split()\n        inventory[name] = int(qty)\n    \n    orders = []\n    for _ in range(m):\n        name, qty = input().split()\n        orders.append((name, int(qty)))\n    \n    for name, qty in orders:\n        if name in inventory:\n            inventory[name] = max(0, inventory[name] - qty)\n    \n    items_order = [name for name in inventory]\n    for item in items_order:\n        print(f\"{item} {inventory[item]}\")\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    inventory_list = [input().split() for _ in range(n)]\n    m = int(input())\n    orders_list = []\n    for _ in range(m):\n        name, qty = input().split()\n        orders_list.append((name, int(qty)))\n    update_inventory(n, inventory_list, m, orders_list)",
  "tests": "def test_update_inventory():\n    n = 4\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20),\n        (\"grape\", 10)\n    ]\n    m = 3\n    orders_list = [\n        (\"apple\", 60),\n        (\"banana\", 10),\n        (\"grape\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 20),\n        (\"orange\", 20),\n        (\"grape\", 5)\n    ]\n    assert result == expected\n\ndef test_no_orders():\n    n = 2\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    m = 0\n    orders_list = []\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    assert result == expected\n\ndef test_no_inventory():\n    n = 0\n    inventory_list = []\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = []\n    assert result == expected\n\ndef test_more_orders_than_stock():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 15),\n        (\"banana\", 10)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_exact_stock_match():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_unordered_orders():\n    n = 3\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20)\n    ]\n    m = 3\n    orders_list = [\n        (\"banana\", 20),\n        (\"orange\", 15),\n        (\"apple\", 30)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 20),\n        (\"banana\", 10),\n        (\"orange\", 5)\n    ]\n    assert result == expected"
}