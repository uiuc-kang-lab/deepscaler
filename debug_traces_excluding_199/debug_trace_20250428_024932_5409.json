{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    if n == 0 or m == 0:\n        return False\n    \n    # Initialize the visited matrix\n    visited = [[False] * (m + 1) for _ in range(n + 1)]\n    queue = deque()\n    start = (1, 1)\n    end = (n, m)\n    \n    queue.append(start)\n    visited[start[0]][start[1]] = True\n    \n    # Define the four possible directions\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    blocked = set(blocked_cells)\n    \n    while queue:\n        current = queue.popleft()\n        current_i, current_j = current\n        \n        # Check if current is the target\n        if current_i == end[0] and current_j == end[1]:\n            return True\n        \n        # Explore all four directions\n        for di, dj in directions:\n            ni = current_i + di\n            nj = current_j + dj\n            \n            # Check if the new position is within bounds\n            if 1 <= ni <= n and 1 <= nj <= m:\n                # Check if the cell is not blocked and not visited\n                if (ni, nj) not in blocked and not visited[ni][nj]:\n                    visited[ni][nj] = True\n                    queue.append((ni, nj))\n    \n    # If target is not reached\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}