{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef max_unique_cities(N, M, cities, trains):\n    # Build adjacency list\n    adj = [[] for _ in range(N)]\n    for u, v, d in trains:\n        u0 = u - 1\n        v0 = v - 1\n        adj[u0].append((v0, d))\n        adj[v0].append((u0, d))\n    \n    max_length = 1  # At least one city can be visited\n    \n    for start in range(N):\n        # Initialize BFS queue with the starting city's bitmask and distance\n        queue = deque()\n        bitmask = 1 << start  # 0-based index for the starting city\n        queue.append((bitmask, 0))\n        current_max = 1\n        \n        while queue:\n            current_bitmask, current_distance = queue.popleft()\n            current_length = bin(current_bitmask).count('1')\n            \n            if current_length > current_max:\n                current_max = current_length\n            \n            for neighbor, distance in adj[start]:\n                if not (current_bitmask & (1 << neighbor)):\n                    new_bitmask = current_bitmask | (1 << neighbor)\n                    new_distance = current_distance + distance\n                    queue.append((new_bitmask, new_distance))\n        \n        if current_max > max_length:\n            max_length = current_max\n    \n    return max_length",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}