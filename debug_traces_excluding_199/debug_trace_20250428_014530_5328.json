{
  "data_source": "kodcode",
  "model_code": "n = int(input())\ninventory = {}\norder_list = []\n\nfor _ in range(n):\n    name, q = input().split()\n    q = int(q)\n    inventory[name] = q\n    order_list.append(name)\n\nm = int(input())\norders = []\n\nfor _ in range(m):\n    line = input().split()\n    items = []\n    total_sum = 0\n    for item in line:\n        items.append((item, int(item)))\n        total_sum += int(item)\n    orders.append((items, total_sum))\n\nfor items, total_sum in orders:\n    for name, qty in items:\n        if name in inventory:\n            new_qty = inventory[name] - qty\n            if new_qty < 0:\n                new_qty = 0\n            else:\n                inventory[name] = new_qty\n        else:\n            new_qty = inventory.get(name, 0) - total_sum\n            if new_qty < 0:\n                new_qty = 0\n            else:\n                inventory[name] = new_qty\n\nfor name in order_list:\n    print(f\"{name} {inventory.get(name, 0)}\")",
  "tests": "def test_update_inventory():\n    n = 4\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20),\n        (\"grape\", 10)\n    ]\n    m = 3\n    orders_list = [\n        (\"apple\", 60),\n        (\"banana\", 10),\n        (\"grape\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 20),\n        (\"orange\", 20),\n        (\"grape\", 5)\n    ]\n    assert result == expected\n\ndef test_no_orders():\n    n = 2\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    m = 0\n    orders_list = []\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 50),\n        (\"banana\", 30)\n    ]\n    assert result == expected\n\ndef test_no_inventory():\n    n = 0\n    inventory_list = []\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = []\n    assert result == expected\n\ndef test_more_orders_than_stock():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 15),\n        (\"banana\", 10)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_exact_stock_match():\n    n = 2\n    inventory_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    m = 2\n    orders_list = [\n        (\"apple\", 10),\n        (\"banana\", 5)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 0),\n        (\"banana\", 0)\n    ]\n    assert result == expected\n\ndef test_unordered_orders():\n    n = 3\n    inventory_list = [\n        (\"apple\", 50),\n        (\"banana\", 30),\n        (\"orange\", 20)\n    ]\n    m = 3\n    orders_list = [\n        (\"banana\", 20),\n        (\"orange\", 15),\n        (\"apple\", 30)\n    ]\n    result = update_inventory(n, inventory_list, m, orders_list)\n    expected = [\n        (\"apple\", 20),\n        (\"banana\", 10),\n        (\"orange\", 5)\n    ]\n    assert result == expected"
}