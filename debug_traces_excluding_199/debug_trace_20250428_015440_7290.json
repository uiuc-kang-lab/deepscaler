{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    \n    longest_start = 0\n    longest_end = 0\n    longest_length = 0\n    \n    def expand_around_center(left: int, right: int) -> tuple:\n        while left >= 0 and right < n and s[left] == s[right]:\n            left -= 1\n            right += 1\n        if left < 0 or right >= n:\n            return (left + 1, right - 1, 0)\n        else:\n            return (left + 1, right - 1, right - left - 1)\n    \n    for i in range(n):\n        # Check for odd length palindromes\n        start, end, length = expand_around_center(i, i)\n        if length > longest_length:\n            longest_length = length\n            longest_start = start\n            longest_end = end\n        \n        # Check for even length palindromes\n        start, end, length = expand_around_center(i, i + 1)\n        if length > longest_length:\n            longest_length = length\n            longest_start = start\n            longest_end = end\n    \n    return s[longest_start : longest_end + 1]",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}