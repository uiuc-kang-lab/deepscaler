{
  "data_source": "kodcode",
  "model_code": "from math import ceil\n\ndef max_time_to_report_issue(n, r, t, coordinates):\n    if n == 0:\n        return 0\n    start = coordinates[0]\n    max_time = 0\n    for coord in coordinates:\n        dx = abs(coord[0] - start[0])\n        dy = abs(coord[1] - start[1])\n        d = (dx**2 + dy**2) ** 0.5\n        current_time = ceil(d / r)\n        if current_time > max_time:\n            max_time = current_time\n    return max_time if max_time <= t else -1",
  "tests": "from solution import max_time_to_report_issue\n\ndef test_example_1():\n    n = 4\n    r = 5\n    t = 10\n    coordinates = [(0, 0), (3, 4), (-3, -4), (6, 8)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 2\n\ndef test_example_2():\n    n = 3\n    r = 2\n    t = 5\n    coordinates = [(0, 0), (5, 5), (-1, -1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1\n\ndef test_single_node():\n    n = 1\n    r = 2\n    t = 0\n    coordinates = [(1, 1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 0\n\ndef test_nodes_all_reachable():\n    n = 3\n    r = 5\n    t = 2\n    coordinates = [(0, 0), (3, 4), (3, -4)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 1\n\ndef test_impossible_reach():\n    n = 3\n    r = 1\n    t = 5\n    coordinates = [(0, 0), (10, 10), (20, 20)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1"
}