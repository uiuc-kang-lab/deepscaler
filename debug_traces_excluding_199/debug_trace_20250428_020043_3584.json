{
  "data_source": "kodcode",
  "model_code": "class DSU:\n    def __init__(self, n):\n        self.parent = list(range(n + 1))\n        self.rank = [1] * (n + 1)\n    \n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        x_root = self.find(x)\n        y_root = self.find(y)\n        if x_root == y_root:\n            return False\n        if self.rank[x_root] < self.rank[y_root]:\n            self.parent[x_root] = y_root\n        else:\n            self.parent[y_root] = x_root\n            if self.rank[x_root] == self.rank[y_root]:\n                self.rank[x_root] += 1\n        return True\n\ndef find_mst_and_second_best(n, m, edges):\n    edges_sorted = sorted(edges, key=lambda x: x[2])\n    dsu = DSU(n)\n    mst_edges = []\n    \n    for u, v, t in edges_sorted:\n        if dsu.find(u) != dsu.find(v):\n            mst_edges.append((u, v, t))\n            dsu.union(u, v)\n    \n    non_mst_edges = [e for e in edges if e not in mst_edges]\n    \n    if not non_mst_edges:\n        return (mst_edges[0][2], float('inf'))\n    \n    non_mst_edges.sort(key=lambda x: x[2])\n    \n    second_best = float('inf')\n    \n    for e in non_mst_edges:\n        new_edges = [e2 for e2 in edges if e2 != e]\n        dsu = DSU(n)\n        \n        mst_new_edges = []\n        for u, v, t in new_edges:\n            if dsu.find(u) != dsu.find(v):\n                mst_new_edges.append((u, v, t))\n                dsu.union(u, v)\n        \n        max_t = max(e[2] for e in mst_new_edges)\n        if max_t < second_best:\n            second_best = max_t\n    \n    return (mst_edges[0][2], second_best)",
  "tests": "def test_find_mst_and_second_best():\n    # Sample Test Case 1\n    assert find_mst_and_second_best(4, 5, [(1, 2, 1), (1, 3, 4), (2, 3, 3), (2, 4, 2), (3, 4, 5)]) == (6, 7)\n    \n    # Additional Test Cases\n    assert find_mst_and_second_best(3, 3, [(1, 2, 1), (2, 3, 2), (1, 3, 3)]) == (3, 4)\n    assert find_mst_and_second_best(2, 1, [(1, 2, 1)]) == (1, float('inf')) # There's no second best network possible.\n    \n    # Larger Test Case\n    n = 6\n    edges = [\n        (1, 2, 6), (1, 3, 1), (1, 4, 5), (2, 3, 5), (2, 5, 3), \n        (3, 4, 5), (3, 5, 6), (3, 6, 4), (4, 6, 2), (5, 6, 6)\n    ]\n    assert find_mst_and_second_best(n, len(edges), edges) == (15, 16)"
}