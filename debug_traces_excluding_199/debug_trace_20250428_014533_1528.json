{
  "data_source": "kodcode",
  "model_code": "from collections import Counter\n\ndef reorganizeString(s):\n    freq = Counter(s)\n    n = len(s)\n    max_freq = max(freq.values())\n    \n    if max_freq > (n + 1) // 2:\n        return \"\"\n    \n    sorted_chars = sorted(freq.keys(), key=lambda x: (-freq[x], x))\n    result = []\n    prev = None\n    \n    for char in sorted_chars:\n        if prev is None:\n            result.append(char)\n            prev = char\n        else:\n            if char != prev:\n                result.append(char)\n                prev = char\n    return ''.join(result)",
  "tests": "from solution import reorganizeString\n\ndef test_example1():\n    assert reorganizeString(\"aab\") == \"aba\"\n\ndef test_example2():\n    assert reorganizeString(\"aaab\") == \"\"\n\ndef test_single_character():\n    assert reorganizeString(\"a\") == \"a\"\n    \ndef test_two_characters():\n    assert reorganizeString(\"aa\") == \"\"\n    \ndef test_no_need_to_reorganize():\n    assert reorganizeString(\"abc\") == \"abc\"\n\ndef test_repeating_characters():\n    result = reorganizeString(\"aaabb\")\n    assert result in [\"ababa\", \"babab\"]\n\ndef test_large_string():\n    s = \"a\" * 50000 + \"b\" * 50000\n    result = reorganizeString(s)\n    # Ensure that no two adjacent characters are the same\n    for i in range(len(result) - 1):\n        assert result[i] != result[i + 1]"
}