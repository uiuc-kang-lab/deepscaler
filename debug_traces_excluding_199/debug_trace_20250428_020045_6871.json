{
  "data_source": "kodcode",
  "model_code": "def max_unique_cities(N, M, cities, trains):\n    cities = sorted(cities)\n    max_length = 0\n\n    def dfs(current, visited):\n        nonlocal max_length\n        if current == -1:\n            return 0\n        if visited[current]:\n            return 0\n        for next_city in range(N):\n            if not visited[next_city] and (cities[current] - cities[next_city]) <= 0:\n                visited[next_city] = True\n                new_distance = 0\n                for _ in range(N):\n                    new_distance += abs(cities[current] - cities[next_city])\n                    if new_distance > max_length:\n                        max_length = new_distance\n                        return\n                visited[next_city] = False\n                new_distance = 0\n                for _ in range(N):\n                    new_distance += abs(cities[current] - cities[next_city])\n                    if new_distance > max_length:\n                        max_length = new_distance\n                        return\n        return 0\n\n    for start in range(N):\n        visited = [False] * N\n        visited[start] = True\n        current_length = 0\n        dfs(start, visited)\n        if max_length < current_length:\n            max_length = current_length\n\n    return max_length",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}