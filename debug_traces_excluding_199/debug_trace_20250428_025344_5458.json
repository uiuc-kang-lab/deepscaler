{
  "data_source": "kodcode",
  "model_code": "def is_valid(board, row, col, num):\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n    start_row = (row // 3) * 3\n    start_col = (col // 3) * 3\n    for i in range(3):\n        for j in range(3):\n            if board[start_row + i][start_col + j] == num:\n                return False\n    return True\n\ndef find_empty(board):\n    for row in range(9):\n        for col in range(9):\n            if board[row][col] == '.':\n                return (row, col)\n    return None\n\ndef solve_sudoku(board):\n    # Make a deep copy of the board to avoid modifying the input\n    board = [row[:] for row in board]\n    # Find the next empty cell\n    empty = find_empty(board)\n    if not empty:\n        return board  # No more empty cells\n    row, col = empty\n    for num in range(1, 10):\n        if is_valid(board, row, col, num):\n            board[row][col] = str(num)\n            result = solve_sudoku(board)\n            if result is not None:\n                return result\n            # Backtrack\n            board[row][col] = '.'  # Reset the cell\n    return None  # No solution found (shouldn't happen per problem statement)",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}