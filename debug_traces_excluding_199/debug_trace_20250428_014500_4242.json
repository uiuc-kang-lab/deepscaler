{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    if not blocked_cells:\n        return True\n    \n    visited = [[False for _ in range(m)] for _ in range(n)]\n    queue = deque()\n    start = (0, 0)\n    end = (n-1, m-1)\n    \n    if start in blocked_cells:\n        return False\n    \n    visited[start[0]][start[1]] = True\n    queue.append(start)\n    \n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while queue:\n        i, j = queue.popleft()\n        for di, dj in directions:\n            ni = i + di\n            nj = j + dj\n            if 0 <= ni < n and 0 <= nj < m:\n                if (ni, nj) not in blocked_cells and not visited[ni][nj]:\n                    visited[ni][nj] = True\n                    queue.append((ni, nj))\n    \n    return visited[end[0]][end[1]]",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}