{
  "data_source": "kodcode",
  "model_code": "from collections import defaultdict\n\ndef reorganizeString(s):\n    freq = defaultdict(int)\n    for c in s:\n        freq[c] += 1\n    \n    n = len(s)\n    max_freq = max(freq.values()) if freq else 0\n    \n    if max_freq > (n + 1) // 2:\n        return ''\n    \n    result = []\n    last_char = None\n    \n    for _ in range(n):\n        if not result:\n            last_char = next(iter(freq.keys()))\n            continue\n        \n        for char in freq.keys():\n            if char != last_char:\n                result.append(char)\n                last_char = char\n                break\n        else:\n            return ''\n    \n    return ''.join(result)",
  "tests": "from solution import reorganizeString\n\ndef test_example1():\n    assert reorganizeString(\"aab\") == \"aba\"\n\ndef test_example2():\n    assert reorganizeString(\"aaab\") == \"\"\n\ndef test_single_character():\n    assert reorganizeString(\"a\") == \"a\"\n    \ndef test_two_characters():\n    assert reorganizeString(\"aa\") == \"\"\n    \ndef test_no_need_to_reorganize():\n    assert reorganizeString(\"abc\") == \"abc\"\n\ndef test_repeating_characters():\n    result = reorganizeString(\"aaabb\")\n    assert result in [\"ababa\", \"babab\"]\n\ndef test_large_string():\n    s = \"a\" * 50000 + \"b\" * 50000\n    result = reorganizeString(s)\n    # Ensure that no two adjacent characters are the same\n    for i in range(len(result) - 1):\n        assert result[i] != result[i + 1]"
}