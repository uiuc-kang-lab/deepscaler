{
  "data_source": "kodcode",
  "model_code": "import sys\n\ndef letter_frequency_analyzer(input_lines):\n    test_cases = []\n    for line in input_lines:\n        stripped_line = line.rstrip('\\n')\n        if stripped_line == '.':\n            break\n        test_cases.append(stripped_line)\n    \n    for s in test_cases:\n        counts = {}\n        for c in s:\n            counts[c] = counts.get(c, 0) + 1\n        if not counts:\n            print('')\n            continue\n        max_freq = max(counts.values())\n        max_letters = [k for k, v in counts.items() if v == max_freq]\n        max_letters.sort()\n        print(' '.join(max_letters), end=' \\n')\n\n# Read input and process\ninput_lines = [line.rstrip('\\n') for line in sys.stdin]\nletter_frequency_analyzer(input_lines)",
  "tests": "from solution import letter_frequency_analyzer\n\ndef test_single_test_case_hello():\n    input_lines = [\"hello\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\"]\n\ndef test_single_test_case_abracadabra():\n    input_lines = [\"abracadabra\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_single_test_case_mississippi():\n    input_lines = [\"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"i s\"]\n\ndef test_multiple_test_cases():\n    input_lines = [\"hello\", \"abracadabra\", \"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\", \"a\", \"i s\"]\n\ndef test_all_letters_same():\n    input_lines = [\"aaaaaa\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_tie_in_frequencies():\n    input_lines = [\"aabbcc\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a b c\"]"
}