{
  "data_source": "kodcode",
  "model_code": "from collections import defaultdict\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    ptr = 0\n    n = int(data[ptr])\n    ptr += 1\n    \n    operations = []\n    for _ in range(n):\n        op = data[ptr]\n        ptr += 1\n        if op == '+':\n            parts = data[ptr:ptr+3]\n            id = parts[1]\n            qty = int(parts[2])\n            operations.append( (id, qty) )\n            ptr += 3\n        else:\n            parts = data[ptr:ptr+3]\n            id = parts[1]\n            qty = int(parts[2])\n            operations.append( (id, -qty) )\n            ptr += 3\n    \n    q = int(data[ptr])\n    ptr += 1\n    \n    queries = []\n    for _ in range(q):\n        queries.append(data[ptr])\n        ptr += 1\n    \n    inventory = defaultdict(int)\n    for id, qty in operations:\n        inventory[id] += qty\n    \n    results = []\n    for query in queries:\n        if query in inventory:\n            if inventory[query] > 0:\n                results.append(\"in stock\")\n            else:\n                results.append(\"out of stock\")\n        else:\n            results.append(\"out of stock\")\n    \n    print('\\n'.join(results))\n\nif __name__ == \"__main__\":\n    main()",
  "tests": "from solution import process_inventory\n\ndef test_example_case():\n    n = 5\n    operations = [\n        \"+item1 300\",\n        \"-item2 100\",\n        \"+item2 150\",\n        \"-item1 200\",\n        \"-item2 200\"\n    ]\n    q = 3\n    queries = [\"item1\", \"item2\", \"item3\"]\n    expected_output = [\"in stock\", \"out of stock\", \"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_single_operation():\n    n = 1\n    operations = [\"+item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_zero_quantity():\n    n = 2\n    operations = [\"+item1 100\", \"-item1 100\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_negative_stock():\n    n = 2\n    operations = [\"-item1 100\", \"+item1 50\"]\n    q = 1\n    queries = [\"item1\"]\n    expected_output = [\"out of stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output\n\ndef test_multiple_items():\n    n = 3\n    operations = [\"+item1 200\", \"+item2 150\", \"-item2 100\"]\n    q = 2\n    queries = [\"item1\", \"item2\"]\n    expected_output = [\"in stock\", \"in stock\"]\n    assert process_inventory(n, operations, q, queries) == expected_output"
}