{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef max_time_to_report_issue(n, r, t, coordinates):\n    if n == 0:\n        return 0  # Assuming n is at least 1 as per problem constraints\n    \n    r_squared = r * r\n    distance_squared = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            dx = coordinates[i][0] - coordinates[j][0]\n            dy = coordinates[i][1] - coordinates[j][1]\n            distance_squared[i][j] = dx * dx + dy * dy\n    \n    earliest_time = [-1] * n\n    earliest_time[0] = 0  # Starting node has time 0\n    \n    queue = deque()\n    queue.append((0, 0))\n    \n    while queue:\n        u, current_time = queue.popleft()\n        for v in range(n):\n            if earliest_time[v] == -1:\n                squared_distance = distance_squared[u][v]\n                if squared_distance <= r_squared and current_time + 1 <= t:\n                    if earliest_time[v] == -1 or (current_time + 1) < earliest_time[v]:\n                        earliest_time[v] = current_time + 1\n                        queue.append((v, current_time + 1))\n    \n    # Check if all nodes are reachable within time t\n    reachable = True\n    for i in range(n):\n        if earliest_time[i] > t:\n            reachable = False\n            break\n    if not reachable:\n        return -1\n    else:\n        return max(earliest_time)",
  "tests": "from solution import max_time_to_report_issue\n\ndef test_example_1():\n    n = 4\n    r = 5\n    t = 10\n    coordinates = [(0, 0), (3, 4), (-3, -4), (6, 8)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 2\n\ndef test_example_2():\n    n = 3\n    r = 2\n    t = 5\n    coordinates = [(0, 0), (5, 5), (-1, -1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1\n\ndef test_single_node():\n    n = 1\n    r = 2\n    t = 0\n    coordinates = [(1, 1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 0\n\ndef test_nodes_all_reachable():\n    n = 3\n    r = 5\n    t = 2\n    coordinates = [(0, 0), (3, 4), (3, -4)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 1\n\ndef test_impossible_reach():\n    n = 3\n    r = 1\n    t = 5\n    coordinates = [(0, 0), (10, 10), (20, 20)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1"
}