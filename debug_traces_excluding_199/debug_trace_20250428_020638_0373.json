{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    if n == 1 and m == 1:\n        return True\n    \n    blocked_set = set(blocked_cells)\n    queue = deque()\n    queue.append((0, 0))\n    visited = set()\n    visited.add((0, 0))\n    \n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while queue:\n        current = queue.popleft()\n        current_i, current_j = current\n        \n        if current_i == n - 1 and current_j == m - 1:\n            return True\n        \n        for dx, dy in directions:\n            new_i = current_i + dx\n            new_j = current_j + dy\n            \n            if 0 <= new_i < n and 0 <= new_j < m:\n                if (new_i, new_j) not in blocked_set and (new_i, new_j) not in visited:\n                    visited.add((new_i, new_j))\n                    queue.append((new_i, new_j))\n    \n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}