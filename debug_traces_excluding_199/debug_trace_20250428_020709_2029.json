{
  "data_source": "kodcode",
  "model_code": "def max_unique_cities(N, M, cities, trains):\n    if M == 0:\n        return 1\n    \n    # Build adjacency list\n    adj = [[] for _ in range(N)]\n    for (a, b, d) in trains:\n        if abs(cities[a] - cities[b]) <= d:\n            adj[a].append(b)\n            adj[b].append(a)\n    \n    max_result = 0\n    \n    for start in range(N):\n        visited = set()\n        visited.add(start)\n        \n        def dfs(current):\n            nonlocal max_result\n            global max_result\n            \n            if len(visited) > max_result:\n                max_result = len(visited)\n            \n            for neighbor in adj[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    dfs(neighbor)\n                    visited.remove(neighbor)\n        \n        dfs(start)\n    \n    return max_result",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}