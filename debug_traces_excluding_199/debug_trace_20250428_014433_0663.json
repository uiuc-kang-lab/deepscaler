{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    def is_valid(grid, row, col, num):\n        # Check row\n        for x in range(9):\n            if grid[row][x] == num:\n                return False\n        # Check column\n        for x in range(9):\n            if grid[x][col] == num:\n                return False\n        # Check subgrid\n        start_row = (row // 3) * 3\n        start_col = (col // 3) * 3\n        for x in range(start_row, start_row + 3):\n            for y in range(start_col, start_col + 3):\n                if grid[x][y] == num:\n                    return False\n        return True\n\n    def find_empty(grid):\n        for row in range(9):\n            for col in range(9):\n                if grid[row][col] == '.':\n                    return (row, col)\n        return None\n\n    grid = [row.copy() for row in board]\n    find_empty(grid)\n    while True:\n        next_empty = find_empty(grid)\n        if next_empty is None:\n            break\n        row, col = next_empty\n        possible = []\n        for num in range(1, 10):\n            if is_valid(grid, row, col, num):\n                possible.append(num)\n        if not possible:\n            return solve_sudoku(grid)\n        for num in possible:\n            grid[row][col] = num\n            if solve_sudoku(grid):\n                return grid\n            grid[row][col] = '.'\n    return grid",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}