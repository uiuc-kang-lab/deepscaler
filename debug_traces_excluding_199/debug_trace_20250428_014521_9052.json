{
  "data_source": "kodcode",
  "model_code": "import sys\n\ndef letter_frequency_analyzer(input_lines):\n    for line in input_lines:\n        if line == '.':\n            break\n        counts = {}\n        for char in line:\n            counts[char] = counts.get(char, 0) + 1\n        max_freq = max(counts.values())\n        most_common = [k for k, v in counts.items() if v == max_freq]\n        most_common.sort()\n        print(' '.join(most_common))\n\n# Read the input lines, each line is a test case string\nlines = [line.rstrip('\\n') for line in sys.stdin]\n# The input is terminated by a period, so the last line is the period\n# Read until we encounter a period\nfor line in lines:\n    if line == '.':\n        break\n    # Process the line\n    counts = {}\n    for char in line:\n        counts[char] = counts.get(char, 0) + 1\n    if not counts:\n        # This case should not occur as per the problem constraints\n        pass\n    max_freq = max(counts.values())\n    most_common = [k for k, v in counts.items() if v == max_freq]\n    most_common.sort()\n    print(' '.join(most_common))",
  "tests": "from solution import letter_frequency_analyzer\n\ndef test_single_test_case_hello():\n    input_lines = [\"hello\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\"]\n\ndef test_single_test_case_abracadabra():\n    input_lines = [\"abracadabra\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_single_test_case_mississippi():\n    input_lines = [\"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"i s\"]\n\ndef test_multiple_test_cases():\n    input_lines = [\"hello\", \"abracadabra\", \"mississippi\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"l\", \"a\", \"i s\"]\n\ndef test_all_letters_same():\n    input_lines = [\"aaaaaa\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a\"]\n\ndef test_tie_in_frequencies():\n    input_lines = [\"aabbcc\", \".\"]\n    assert letter_frequency_analyzer(input_lines) == [\"a b c\"]"
}