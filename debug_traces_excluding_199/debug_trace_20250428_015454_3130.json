{
  "data_source": "kodcode",
  "model_code": "def partition_and_sort(lst):\n    negatives = [x for x in lst if x < 0]\n    zeros = [x for x in lst if x == 0]\n    positives = [x for x in lst if x > 0]\n    \n    sorted_neg = sorted(negatives, reverse=True)\n    sorted_pos = sorted(positives)\n    \n    return sorted_neg + zeros + sorted_pos",
  "tests": "from solution import partition_and_sort\n\ndef test_example_case():\n    assert partition_and_sort([3, -1, 0, -2, 5, 0, 2, -3]) == [-1, -2, -3, 0, 0, 2, 3, 5]\n\ndef test_all_negatives():\n    assert partition_and_sort([-5, -1, -3, -2, -4]) == [-1, -2, -3, -4, -5]\n\ndef test_all_zeroes():\n    assert partition_and_sort([0, 0, 0, 0]) == [0, 0, 0, 0]\n\ndef test_all_positives():\n    assert partition_and_sort([1, 3, 2, 5, 4]) == [1, 2, 3, 4, 5]\n\ndef test_mixed_signs():\n    assert partition_and_sort([-5, 0, 3, -2, 4, -1, 0, 2]) == [-1, -2, -5, 0, 0, 2, 3, 4]\n\ndef test_empty_list():\n    assert partition_and_sort([]) == []\n\ndef test_no_zeros():\n    assert partition_and_sort([2, -3, 1, -1]) == [-1, -3, 1, 2]\n\ndef test_no_negatives():\n    assert partition_and_sort([0, 2, 0, 3, 1]) == [0, 0, 1, 2, 3]\n\ndef test_no_positives():\n    assert partition_and_sort([0, -2, 0, -1, 0]) == [-1, -2, 0, 0, 0]"
}