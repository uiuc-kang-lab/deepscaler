{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    def get_possible_numbers(board, row, col):\n        row_numbers = set(board[row])\n        col_numbers = set()\n        for i in range(9):\n            if board[i][col] != 0:\n                col_numbers.add(board[i][col])\n        start_row = (row // 3) * 3\n        start_col = (col // 3) * 3\n        subgrid_numbers = set()\n        for i in range(start_row, start_row + 3):\n            for j in range(start_col, start_col + 3):\n                if board[i][j] != 0:\n                    subgrid_numbers.add(board[i][j])\n        possible = [num for num in range(1, 10) if num not in row_numbers and num not in col_numbers and num not in subgrid_numbers]\n        return possible\n\n    # Read input and replace dots with 0s\n    board = [list(map(int, input().strip())) for _ in range(9)]\n    \n    # Collect all empty cells\n    empty_cells = []\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                empty_cells.append((i, j))\n    \n    while empty_cells:\n        i, j = empty_cells[0]\n        possible = get_possible_numbers(board, i, j)\n        if len(possible) == 1:\n            board[i][j] = possible[0]\n            empty_cells.pop(0)\n        else:\n            # Remove the first empty cell and continue\n            empty_cells.pop(0)\n    \n    return board",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}