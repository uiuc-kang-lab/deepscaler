{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s):\n    max_len = 0\n    max_sub = ''\n\n    def expand_around_center(left, right):\n        l = left\n        r = right\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            l -= 1\n            r += 1\n        if l < r:\n            return s[l+1:r]\n        else:\n            return ''\n\n    for i in range(len(s)):\n        current = expand_around_center(i, i)\n        if len(current) > max_len:\n            max_len = len(current)\n            max_sub = current\n        current = expand_around_center(i, i+1)\n        if len(current) > max_len:\n            max_len = len(current)\n            max_sub = current\n\n    return max_sub",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}