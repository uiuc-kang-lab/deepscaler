{
  "data_source": "kodcode",
  "model_code": "n = int(input())\nthickness = list(map(int, input().split()))\nT = int(input())\n\nmax_books = 0\ndp = [-1] * (T + 1)\ndp[0] = 0\n\nfor t in thickness:\n    for i in range(T, t - 1, -1):\n        if dp[i - t] != -1:\n            if dp[i] < dp[i - t] + 1:\n                dp[i] = dp[i - t] + 1\n\nfor i in range(T, -1, -1):\n    if dp[i] != -1 and i > max_books:\n        max_books = i\n\nprint(max_books)",
  "tests": "def test_single_book():\n    assert max_books_on_shelf(1, [100], 50) == 0\n    assert max_books_on_shelf(1, [30], 30) == 1\n\ndef test_multiple_books():\n    assert max_books_on_shelf(5, [10, 20, 30, 40, 50], 100) == 4\n    assert max_books_on_shelf(3, [15, 5, 10], 30) == 3\n    assert max_books_on_shelf(4, [25, 10, 30, 20], 50) == 2\n\ndef test_maximum_thickness():\n    assert max_books_on_shelf(10, [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 100) == 10\n    assert max_books_on_shelf(6, [50, 20, 20, 10, 10, 10], 100) == 5\n    \n# Running these tests will require the function to be placed into a module named 'solution',\n# and then you can run pytest on this file containing the test cases."
}