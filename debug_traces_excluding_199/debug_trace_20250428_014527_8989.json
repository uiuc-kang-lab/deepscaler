{
  "data_source": "kodcode",
  "model_code": "n, m = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n)]\n\nif n == 0 or m == 0:\n    print(0)\n    exit()\n\ndp = [[1] * m for _ in range(n)]\n\nfor i in range(1, n):\n    for j in range(1, m):\n        if grid[i][j] == grid[i-1][j] and grid[i][j] == grid[i][j-1] and grid[i][j] == grid[i-1][j-1]:\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        else:\n            dp[i][j] = 1\n\nprint(max(dp))",
  "tests": "from solution import largest_square_with_same_corners\n\ndef test_example_1():\n    n = 5\n    m = 5\n    grid = [\n        [1, 2, 3, 4, 5],\n        [2, 1, 1, 1, 5],\n        [3, 1, 5, 1, 5],\n        [4, 1, 1, 1, 4],\n        [5, 4, 3, 2, 1]\n    ]\n    assert largest_square_with_same_corners(n, m, grid) == 3\n\ndef test_example_2():\n    n = 4\n    m = 4\n    grid = [\n        [1, 2, 3, 4],\n        [2, 1, 4, 3],\n        [3, 4, 1, 2],\n        [4, 3, 2, 1]\n    ]\n    assert largest_square_with_same_corners(n, m, grid) == 1\n\ndef test_single_cell_grid():\n    n = 1\n    m = 1\n    grid = [[5]]\n    assert largest_square_with_same_corners(n, m, grid) == 1\n\ndef test_no_square_larger_than_1():\n    n = 3\n    m = 3\n    grid = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    assert largest_square_with_same_corners(n, m, grid) == 1\n\ndef test_large_identical_values():\n    n = 3\n    m = 3\n    grid = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]\n    ]\n    assert largest_square_with_same_corners(n, m, grid) == 3"
}