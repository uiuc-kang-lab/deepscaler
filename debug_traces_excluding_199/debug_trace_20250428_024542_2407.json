{
  "data_source": "kodcode",
  "model_code": "import heapq\n\ndef max_unique_cities(N, M, cities, trains):\n    if N == 0:\n        return 0\n    if M == 0:\n        return 1\n\n    # Build adjacency list\n    adj = [[] for _ in range(N + 1)]  # 1-based indexing\n    for u, v, d in trains:\n        adj[u].append((v, d))\n        adj[v].append((u, d))\n\n    max_count = {}\n    heap = []\n\n    # Initialize max_count and heap for each city\n    for u in range(1, N + 1):\n        key = (u, 0)\n        if key in max_count:\n            if max_count[key] > 1:\n                continue\n        max_count[key] = 1\n        heapq.heappush(heap, (-1, u, 0, 1 << (u - 1)))\n\n    while heap:\n        neg_count, current_city, current_distance, visited_mask = heapq.heappop(heap)\n\n        # Skip if a better state exists\n        if visited_mask in max_count and max_count[visited_mask] > neg_count:\n            continue\n\n        # Update max_count for the current city and distance\n        if current_city not in max_count or max_count[current_city] < neg_count:\n            max_count[current_city] = neg_count\n\n        # Explore all neighbors\n        for neighbor, distance in adj[current_city]:\n            new_count = neg_count + 1\n            new_distance = current_distance + distance\n            new_mask = visited_mask | (1 << (neighbor - 1))\n\n            if new_count > max_count.get((neighbor, new_distance), 0):\n                max_count[(neighbor, new_distance)] = new_count\n                heapq.heappush(heap, (-new_count, neighbor, new_distance, new_mask))\n\n    return max_count.get((1, 0), 0)",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}