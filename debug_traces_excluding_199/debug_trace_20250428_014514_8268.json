{
  "data_source": "kodcode",
  "model_code": "def max_unique_cities(N, M, cities, trains):\n    from collections import defaultdict\n\n    city_dict = {i: cities[i] for i in range(N)}\n    max_length = 0\n\n    for start in range(N):\n        max_path = 1\n        visited = set([start])\n        last_distance = 0\n\n        def dfs(current, distance, visited):\n            nonlocal max_length, max_path, visited, last_distance\n\n            if len(visited) > max_length:\n                max_length = len(visited)\n\n            for (u, v, d) in trains:\n                if u == current and v not in visited and d <= distance:\n                    new_visited = visited.copy()\n                    new_visited.add(v)\n                    new_distance = distance + d\n                    dfs(v, new_distance, new_visited)\n\n        dfs(start, 0, visited)\n\n        if max_path > max_length:\n            max_length = max_path\n\n    return max_length",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}