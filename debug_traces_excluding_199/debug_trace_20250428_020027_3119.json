{
  "data_source": "kodcode",
  "model_code": "def longest_palindrome(s):\n    if len(s) == 0:\n        return \"\"\n    \n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            # Update the maximum length found\n            max_len = max(max_len, right - left)\n            left -= 1\n            right += 1\n        return max_len\n    \n    max_len = 0\n    start = 0\n    \n    for i in range(len(s)):\n        # Odd length palindrome\n        len1 = expand_around_center(i, i)\n        if len1 > max_len:\n            max_len = len1\n            start = i - max_len + 1\n    \n    for i in range(len(s) - 1):\n        # Even length palindrome\n        len2 = expand_around_center(i, i + 1)\n        if len2 > max_len:\n            max_len = len2\n            start = i\n    \n    # Extract the longest palindrome\n    return s[start : start + max_len]",
  "tests": "from solution import longest_palindrome\n\ndef test_example_cases():\n    assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"\n    assert longest_palindrome(\"cbbd\") == \"bb\"\n\ndef test_single_character():\n    assert longest_palindrome(\"a\") == \"a\"\n\ndef test_two_identical_characters():\n    assert longest_palindrome(\"aa\") == \"aa\"\n\ndef test_non_palindromic_string():\n    assert longest_palindrome(\"abc\") == \"a\" or longest_palindrome(\"abc\") == \"b\" or longest_palindrome(\"abc\") == \"c\"\n\ndef test_entire_string_palindrome():\n    assert longest_palindrome(\"racecar\") == \"racecar\"\n\ndef test_palindrome_within_string():\n    assert longest_palindrome(\"xabax\") == \"xabax\"\n    assert longest_palindrome(\"xababa\") == \"ababa\"\n\ndef test_long_mixed_string():\n    assert longest_palindrome(\"abcdefgabcba\") == \"abcba\"\n    assert longest_palindrome(\"abacdfgdcaba\") == \"aba\""
}