{
  "data_source": "kodcode",
  "model_code": "import math\nfrom collections import deque\n\ndef max_time_to_report_issue(n, r, t, coordinates):\n    points = [(x, y) for x, y in coordinates]\n    if n == 0:\n        return 0  # handle empty list case\n    \n    # Compute all pairwise distances\n    distances = []\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            dx = points[i][0] - points[j][0]\n            dy = points[i][1] - points[j][1]\n            d = math.sqrt(dx * dx + dy * dy)\n            distances.append(d)\n    \n    # Build adjacency list\n    adjacency = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != j and distances[i][j] <= r:\n                adjacency[i].append(j)\n    \n    # BFS initialization\n    visited = [False] * n\n    queue = deque()\n    max_distance = 0\n    distance = [0] * n\n    \n    if n == 1:\n        return 0  # only one node, no spread needed\n    \n    queue.append(0)\n    visited[0] = True\n    distance[0] = 0\n    \n    while queue:\n        current = queue.popleft()\n        for neighbor in adjacency[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                distance[neighbor] = distance[current] + 1\n                max_distance = max(max_distance, distance[neighbor])\n                queue.append(neighbor)\n    \n    # Check if all nodes are reachable\n    if all(visited):\n        return max_distance\n    else:\n        return -1",
  "tests": "from solution import max_time_to_report_issue\n\ndef test_example_1():\n    n = 4\n    r = 5\n    t = 10\n    coordinates = [(0, 0), (3, 4), (-3, -4), (6, 8)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 2\n\ndef test_example_2():\n    n = 3\n    r = 2\n    t = 5\n    coordinates = [(0, 0), (5, 5), (-1, -1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1\n\ndef test_single_node():\n    n = 1\n    r = 2\n    t = 0\n    coordinates = [(1, 1)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 0\n\ndef test_nodes_all_reachable():\n    n = 3\n    r = 5\n    t = 2\n    coordinates = [(0, 0), (3, 4), (3, -4)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == 1\n\ndef test_impossible_reach():\n    n = 3\n    r = 1\n    t = 5\n    coordinates = [(0, 0), (10, 10), (20, 20)]\n    assert max_time_to_report_issue(n, r, t, coordinates) == -1"
}