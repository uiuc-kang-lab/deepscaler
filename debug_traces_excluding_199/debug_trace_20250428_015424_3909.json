{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    grid = [row.copy() for row in board]\n    filled = [[False for _ in range(9)] for _ in range(9)]\n    while True:\n        empty_cells = []\n        for i in range(9):\n            for j in range(9):\n                if grid[i][j] == '.':\n                    empty_cells.append((i, j))\n        if not empty_cells:\n            break\n        for i, j in empty_cells:\n            current_num = grid[i][j]\n            row = grid[i]\n            row_numbers = set()\n            for num in row:\n                if num != current_num:\n                    row_numbers.add(num)\n            col = [grid[x][j] for x in range(9)]\n            col_numbers = set()\n            for num in col:\n                if num != current_num:\n                    col_numbers.add(num)\n            subgrid = []\n            start_row = (i // 3) * 3\n            start_col = (j // 3) * 3\n            for x in range(start_row, start_row + 3):\n                for y in range(start_col, start_col + 3):\n                    subgrid.append(grid[x][y])\n            subgrid_numbers = set()\n            for num in subgrid:\n                if num != current_num:\n                    subgrid_numbers.add(num)\n            possible = set(range(1, 10)) - row_numbers - col_numbers - subgrid_numbers\n            if len(possible) == 1:\n                grid[i][j] = possible.pop()\n                filled[i][j] = True\n    return grid",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}