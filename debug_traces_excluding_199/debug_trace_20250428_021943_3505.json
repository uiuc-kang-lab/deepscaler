{
  "data_source": "kodcode",
  "model_code": "import heapq\n\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    idx = 0\n    t = int(input[idx])\n    idx += 1\n    for _ in range(t):\n        n = int(input[idx])\n        m = int(input[idx+1])\n        idx +=2\n        grid = []\n        for i in range(n):\n            row = list(map(int, input[idx:idx+m]))\n            grid.append(row)\n            idx +=m\n        \n        max_sum = [[-float('inf') for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] > max_sum[i][j]:\n                    max_sum[i][j] = grid[i][j]\n        \n        result = 0\n        for i in range(n):\n            for j in range(m):\n                if max_sum[i][j] == -float('inf'):\n                    continue\n                heap = []\n                heapq.heappush(heap, (-max_sum[i][j], i, j))\n                current_sum = max_sum[i][j]\n                max_sum[i][j] = current_sum\n                while heap:\n                    neg_sum, x, y = heapq.heappop(heap)\n                    current_sum = -neg_sum\n                    if current_sum <= max_sum[x][y]:\n                        continue\n                    for dx, dy in [(-1,-1), (-1,0), (-1,1),\n                                   (0,-1),          (0,1),\n                                   (1,-1),  (1,0), (1,1)]:\n                        nx = x + dx\n                        ny = y + dy\n                        if 0 <= nx < n and 0 <= ny < m:\n                            new_sum = current_sum + grid[nx][ny]\n                            if new_sum > max_sum[nx][ny]:\n                                max_sum[nx][ny] = new_sum\n                                heapq.heappush(heap, (-new_sum, nx, ny))\n                    if max_sum[x][y] < current_sum:\n                        max_sum[x][y] = current_sum\n                if max_sum[i][j] > result:\n                    result = max_sum[i][j]\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
  "tests": "from solution import max_coins\n\ndef test_max_coins():\n    assert max_coins(2, [\n        (3, 3, [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]),\n        (2, 2, [\n            [1, 2],\n            [0, 3]\n        ]),\n    ]) == [45, 6]\n\ndef test_single_cell_grid():\n    assert max_coins(1, [\n        (1, 1, [\n            [5]\n        ])\n    ]) == [5]\n\ndef test_all_zero_grid():\n    assert max_coins(1, [\n        (3, 3, [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0]\n        ])\n    ]) == [0]\n\ndef test_single_row_grid():\n    assert max_coins(1, [\n        (1, 5, [\n            [1, 2, 3, 4, 5]\n        ])\n    ]) == [15]\n\ndef test_single_column_grid():\n    assert max_coins(1, [\n        (5, 1, [\n            [1],\n            [2],\n            [3],\n            [4],\n            [5]\n        ])\n    ]) == [15]"
}