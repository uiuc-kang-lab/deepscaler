{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    def solve(board):\n        # Convert the board to a mutable structure\n        board = [row[:] for row in board]\n\n        def is_valid(row, col, num):\n            # Check if num is not present in the row\n            for num_in_row in board[row]:\n                if num_in_row == num:\n                    return False\n            # Check if num is not present in the column\n            for num_in_col in [board[i][col] for i in range(9)]:\n                if num_in_col == num:\n                    return False\n            # Check if num is not present in the subgrid\n            start_row = (row // 3) * 3\n            start_col = (col // 3) * 3\n            for i in range(start_row, start_row + 3):\n                for j in range(start_col, start_col + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n\n        # Try numbers from 1 to 9 in descending order for the current cell\n        for num in sorted(range(1, 10), reverse=True):\n            if is_valid(row, col, num):\n                board[row][col] = num\n                if solve(board):\n                    return True\n                board[row][col] = '.'  # Backtrack\n        return False\n\n    solve(board)\n    return board",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}