{
  "data_source": "kodcode",
  "model_code": "MOD = 998244353\n\ndef count_ways(n, m, grid):\n    if n == 0 or m == 0:\n        return 0\n    start = grid[0][0]\n    end = grid[-1][-1]\n    if start == '*' or end == '*':\n        return 0\n    \n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1  # Starting point\n    \n    # Define all possible knight moves\n    moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2),\n             (1, -2), (1, 2), (2, -1), (2, 1)]\n    \n    for i in range(n):\n        for j in range(m):\n            current = dp[i][j]\n            for dx, dy in moves:\n                x = i + dx\n                y = j + dy\n                if 0 <= x < n and 0 <= y < m:\n                    if grid[x][y] == '.':\n                        dp[x][y] = (dp[x][y] + current) % MOD\n    \n    return dp[-1][-1] % MOD\n\n# Read input\nn, m, grid = map(int, input().split())\nprint(count_ways(n, m, grid))",
  "tests": "from solution import count_ways\n\ndef test_count_ways_3x3():\n    grid = [\n        ['.', '.', '.'],\n        ['.', '*', '.'],\n        ['.', '.', '.']\n    ]\n    assert count_ways(3, 3, grid) == 2\n\ndef test_count_ways_4x4():\n    grid = [\n        ['.', '.', '.', '.'],\n        ['.', '*', '.', '.'],\n        ['.', '.', '*', '.'],\n        ['.', '.', '.', '.']\n    ]\n    assert count_ways(4, 4, grid) == 4\n\ndef test_count_ways_single_cell():\n    grid = [\n        ['.']\n    ]\n    assert count_ways(1, 1, grid) == 1\n\ndef test_count_ways_blocked_start():\n    grid = [\n        ['*', '.', '.'],\n        ['.', '.', '.'],\n        ['.', '.', '.']\n    ]\n    assert count_ways(3, 3, grid) == 0\n\ndef test_count_ways_blocked_finish():\n    grid = [\n        ['.', '.', '.'],\n        ['.', '.', '.'],\n        ['.', '.', '*']\n    ]\n    assert count_ways(3, 3, grid) == 0\n\ndef test_count_ways_all_safe():\n    grid = [\n        ['.', '.', '.', '.'],\n        ['.', '.', '.', '.'],\n        ['.', '.', '.', '.'],\n        ['.', '.', '.', '.']\n    ]\n    assert count_ways(4, 4, grid) == 20\n\ndef test_count_ways_entirely_blocked():\n    grid = [\n        ['.', '*', '.'],\n        ['*', '*', '*'],\n        ['.', '*', '.']\n    ]\n    assert count_ways(3, 3, grid) == 0"
}