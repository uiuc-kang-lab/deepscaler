{
  "data_source": "kodcode",
  "model_code": "def max_unique_cities(N, M, cities, trains):\n    cities_sorted = sorted(cities)\n    dp = [{} for _ in range(N)]\n    \n    for i in range(N):\n        dp[i][0] = 1  # starting at city i with distance 0\n    \n    max_count = 1  # can always visit at least one city\n    \n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            dist = abs(cities_sorted[i] - cities_sorted[j])\n            for d in sorted(dp[i].keys()):\n                if d + dist > dp[i][d]:\n                    break\n                for d_next in dp[j]:\n                    new_d = d + dist + dp[j][d_next]\n                    new_count = dp[i][d] + 1 + dp[j][d_next]\n                    if new_count > dp[j].get(new_d, 0):\n                        if new_count > max_count:\n                            max_count = new_count\n                        dp[j][new_d] = new_count\n    \n    return max_count",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}