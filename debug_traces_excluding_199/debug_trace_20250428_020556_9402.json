{
  "data_source": "kodcode",
  "model_code": "def solve_sudoku(board):\n    def is_valid(b, r, c, num):\n        # Check row\n        for i in range(9):\n            if b[r][i] == num and i != c:\n                return False\n        # Check column\n        for i in range(9):\n            if b[i][c] == num and i != r:\n                return False\n        # Check subgrid\n        start_r = (r // 3) * 3\n        start_c = (c // 3) * 3\n        for i in range(3):\n            for j in range(3):\n                if b[start_r + i][start_c + j] == num and i != c or j != r:\n                    return False\n        return True\n\n    for row in range(9):\n        for col in range(9):\n            if board[row][col] == 0:\n                for num in range(1, 10):\n                    if is_valid(board, row, col, num):\n                        board[row][col] = num\n                        if solve_sudoku(board):\n                            return True\n                        board[row][col] = 0\n                return False\n    return board\n\n# Example usage:\n# board = [\n#     [5, 3, '.', '.', 7, '.', '.', '.', '.'],\n#     [6, '.', '.', '1', '9', '5', '.', '.', '.'],\n#     ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n#     ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n#     ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n#     ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n#     ['.', '6', '.', '.', '.', '.', '2', '.', '8'],\n#     ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n#     ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n# ]\n# solved_board = solve_sudoku(board)\n# for r in range(9):\n#     for c in range(9):\n#         print(solved_board[r][c])",
  "tests": "from solution import solve_sudoku\n\ndef test_sudoku():\n    board = [\n        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],\n        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],\n        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],\n        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],\n        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],\n        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],\n        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],\n        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],\n        ['.', '.', '.', '.', '8', '.', '.', '7', '9']\n    ]\n    \n    solve_sudoku(board)\n    \n    expected = [\n        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],\n        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],\n        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],\n        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],\n        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],\n        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],\n        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],\n        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],\n        ['3', '4', '5', '2', '8', '6', '1', '7', '9']\n    ]\n    \n    assert board == expected"
}