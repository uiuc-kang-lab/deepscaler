{
  "data_source": "kodcode",
  "model_code": "def max_unique_cities(N, M, cities, trains):\n    cities = sorted(cities)\n    max_length = 1  # At least one city can be visited\n    \n    # Preprocess the trains into a list of (from, to) tuples\n    train_list = []\n    for t in trains:\n        city1, city2, distance = t\n        # Ensure city1 is the smaller one\n        if city1 > city2:\n            city1, city2 = city2, city1\n        train_list.append((city1, city2, distance))\n    \n    for start in cities:\n        visited = set([start])\n        max_dist = 0  # Maximum allowed distance for the first step\n        queue = [(start, max_dist, visited)]\n        \n        while queue:\n            current, current_max_dist, visited_set = queue.pop(0)\n            \n            if len(visited_set) > max_length:\n                max_length = len(visited_set)\n                if max_length == N:\n                    break\n            \n            # Explore all reachable cities within current_max_dist\n            for next_city, dist_to_current in train_list:\n                if next_city == start:\n                    continue  # Cannot revisit the same city\n                if dist_to_current > max_dist:\n                    continue  # Maximum allowed distance is fixed for the current step\n                if next_city not in visited_set:\n                    new_visited = visited_set.copy()\n                    new_visited.add(next_city)\n                    new_max_dist = dist_to_current\n                    queue.append((next_city, new_max_dist, new_visited))\n                    visited.add(next_city)\n    \n    return max_length if max_length != 1 else 1\n\n# Example test cases\nprint(max_unique_cities(4, 4, [1, 3, 6, 10], [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]))  # Output: 4\nprint(max_unique_cities(3, 3, [2, 5, 8], [(1, 2, 3), (2, 3, 5), (1, 3, 6)]))  # Output: 3\nprint(max_unique_cities(3, 0, [1, 2, 3], []))  # Output: 1\nprint(max_unique_cities(4, 5, [1, 2, 3, 4], [(1, 2, 1), (2, 3, 2), (3, 4, 3), (1, 3, 5), (2, 4, 7)]))  # Output: 4\nprint(max_unique_cities(4, 5, [1, 3, 6, 10], [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]))  # Output: 4",
  "tests": "def test_example_1():\n    N = 4\n    M = 4\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_example_2():\n    N = 3\n    M = 3\n    cities = [2, 5, 8]\n    trains = [(1, 2, 3), (2, 3, 5), (1, 3, 6)]\n    assert max_unique_cities(N, M, cities, trains) == 3\n    \ndef test_no_trains():\n    N = 3\n    M = 0\n    cities = [1, 2, 3]\n    trains = []\n    assert max_unique_cities(N, M, cities, trains) == 1\n\ndef test_disconnected_cities():\n    N = 4\n    M = 3\n    cities = [1, 2, 3, 4]\n    trains = [(1, 2, 1), (2, 3, 2), (3, 4, 3)]\n    assert max_unique_cities(N, M, cities, trains) == 4\n\ndef test_redundant_trains():\n    N = 4\n    M = 5\n    cities = [1, 3, 6, 10]\n    trains = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (1, 3, 5), (2, 4, 7)]\n    assert max_unique_cities(N, M, cities, trains) == 4"
}