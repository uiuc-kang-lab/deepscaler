{
  "data_source": "kodcode",
  "model_code": "def max_books_on_shelf(n, book_thicknesses, T):\n    thicknesses = list(map(int, book_thicknesses))\n    thicknesses.sort()\n    current_sum = 0\n    count = 0\n    for t in thicknesses:\n        current_sum += t\n        if current_sum > T:\n            break\n        count += 1\n    return count\n\n# Read input\nn = int(input())\nbook_thicknesses = list(map(int, input().split()))\nT = int(input())\n\n# Compute and print the result\nprint(max_books_on_shelf(n, book_thicknesses, T))",
  "tests": "def test_single_book():\n    assert max_books_on_shelf(1, [100], 50) == 0\n    assert max_books_on_shelf(1, [30], 30) == 1\n\ndef test_multiple_books():\n    assert max_books_on_shelf(5, [10, 20, 30, 40, 50], 100) == 4\n    assert max_books_on_shelf(3, [15, 5, 10], 30) == 3\n    assert max_books_on_shelf(4, [25, 10, 30, 20], 50) == 2\n\ndef test_maximum_thickness():\n    assert max_books_on_shelf(10, [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 100) == 10\n    assert max_books_on_shelf(6, [50, 20, 20, 10, 10, 10], 100) == 5\n    \n# Running these tests will require the function to be placed into a module named 'solution',\n# and then you can run pytest on this file containing the test cases."
}cases."
}