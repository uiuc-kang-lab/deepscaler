{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    idx = 0\n    t = int(input[idx])\n    idx += 1\n    for _ in range(t):\n        n = int(input[idx])\n        m = int(input[idx + 1])\n        idx += 2\n        grid = []\n        for i in range(n):\n            row = list(map(int, input[idx:idx + m]))\n            idx += m\n            grid.append(row)\n        if n == 0 or m == 0:\n            print(0)\n            continue\n        max_sum = [[0] * m for _ in range(n)]\n        queue = deque()\n        for i in range(n):\n            for j in range(m):\n                if max_sum[i][j] == 0:\n                    max_sum[i][j] = grid[i][j]\n                    queue.append((i, j))\n        global_max = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] > global_max:\n                    global_max = grid[i][j]\n        directions = [(-1, -1), (-1, 0), (-1, 1),\n                      (0, -1),          (0, 1),\n                      (1, -1),  (1, 0), (1, 1)]\n        while queue:\n            i, j = queue.popleft()\n            current = max_sum[i][j]\n            for dx, dy in directions:\n                ni, nj = i + dx, j + dy\n                if 0 <= ni < n and 0 <= nj < m:\n                    new_sum = current + grid[ni][nj]\n                    if new_sum > max_sum[ni][nj]:\n                        max_sum[ni][nj] = new_sum\n                        if new_sum > global_max:\n                            global_max = new_sum\n                        queue.append((ni, nj))\n        print(global_max)\n\nif __name__ == '__main__':\n    main()",
  "tests": "from solution import max_coins\n\ndef test_max_coins():\n    assert max_coins(2, [\n        (3, 3, [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]),\n        (2, 2, [\n            [1, 2],\n            [0, 3]\n        ]),\n    ]) == [45, 6]\n\ndef test_single_cell_grid():\n    assert max_coins(1, [\n        (1, 1, [\n            [5]\n        ])\n    ]) == [5]\n\ndef test_all_zero_grid():\n    assert max_coins(1, [\n        (3, 3, [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0]\n        ])\n    ]) == [0]\n\ndef test_single_row_grid():\n    assert max_coins(1, [\n        (1, 5, [\n            [1, 2, 3, 4, 5]\n        ])\n    ]) == [15]\n\ndef test_single_column_grid():\n    assert max_coins(1, [\n        (5, 1, [\n            [1],\n            [2],\n            [3],\n            [4],\n            [5]\n        ])\n    ]) == [15]"
}