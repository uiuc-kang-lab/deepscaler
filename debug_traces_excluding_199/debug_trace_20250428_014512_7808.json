{
  "data_source": "kodcode",
  "model_code": "def partition_and_sort(L):\n    negatives = []\n    zeros = []\n    positives = []\n    for num in L:\n        if num < 0:\n            negatives.append(num)\n        elif num == 0:\n            zeros.append(num)\n        else:\n            positives.append(num)\n    # Sort each group according to the rules\n    negatives.sort(reverse=True)\n    zeros.sort()\n    positives.sort()\n    # Concatenate the sorted groups\n    result = negatives + zeros + positives\n    return result",
  "tests": "from solution import partition_and_sort\n\ndef test_example_case():\n    assert partition_and_sort([3, -1, 0, -2, 5, 0, 2, -3]) == [-1, -2, -3, 0, 0, 2, 3, 5]\n\ndef test_all_negatives():\n    assert partition_and_sort([-5, -1, -3, -2, -4]) == [-1, -2, -3, -4, -5]\n\ndef test_all_zeroes():\n    assert partition_and_sort([0, 0, 0, 0]) == [0, 0, 0, 0]\n\ndef test_all_positives():\n    assert partition_and_sort([1, 3, 2, 5, 4]) == [1, 2, 3, 4, 5]\n\ndef test_mixed_signs():\n    assert partition_and_sort([-5, 0, 3, -2, 4, -1, 0, 2]) == [-1, -2, -5, 0, 0, 2, 3, 4]\n\ndef test_empty_list():\n    assert partition_and_sort([]) == []\n\ndef test_no_zeros():\n    assert partition_and_sort([2, -3, 1, -1]) == [-1, -3, 1, 2]\n\ndef test_no_negatives():\n    assert partition_and_sort([0, 2, 0, 3, 1]) == [0, 0, 1, 2, 3]\n\ndef test_no_positives():\n    assert partition_and_sort([0, -2, 0, -1, 0]) == [-1, -2, 0, 0, 0]"
}