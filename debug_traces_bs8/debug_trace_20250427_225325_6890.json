{
  "data_source": "kodcode",
  "model_code": "def count_greater_than_right(buildings):\n    n = len(buildings)\n    if n == 0:\n        return 0\n    suffix_max = [0] * n\n    current_max = 0\n    suffix_max[-1] = 0  # No buildings to the right of the last building\n    for i in range(n - 2, -1, -1):\n        current_max = max(buildings[i + 1], current_max)\n        suffix_max[i] = current_max\n    count = 0\n    for i in range(n):\n        if buildings[i] > suffix_max[i]:\n            count += 1\n    return count",
  "tests": "from solution import count_greater_than_right\n\ndef test_example_1():\n    buildings = [4, 2, 7, 1, 3]\n    assert count_greater_than_right(buildings) == 2\n\ndef test_example_2():\n    buildings = [1, 2, 3]\n    assert count_greater_than_right(buildings) == 1\n\ndef test_all_equal_heights():\n    buildings = [3, 3, 3, 3]\n    assert count_greater_than_right(buildings) == 1\n\ndef test_single_building():\n    buildings = [10]\n    assert count_greater_than_right(buildings) == 1\n\ndef test_decreasing_heights():\n    buildings = [5, 4, 3, 2, 1]\n    assert count_greater_than_right(buildings) == 5\n\ndef test_increasing_heights():\n    buildings = [1, 2, 3, 4, 5]\n    assert count_greater_than_right(buildings) == 1\n\ndef test_random_heights():\n    buildings = [7, 10, 4, 10, 5, 6, 2]\n    assert count_greater_than_right(buildings) == 3\n    \ndef test_large_input():\n    buildings = [i for i in range(100000, 0, -1)]\n    assert count_greater_than_right(buildings) == 100000"
}