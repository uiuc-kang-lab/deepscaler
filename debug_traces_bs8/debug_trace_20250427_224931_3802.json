{
  "data_source": "kodcode",
  "model_code": "from collections import deque\n\ndef is_path_possible(n, m, blocked_cells):\n    # Convert blocked cells to 0-based coordinates\n    blocked = [(i-1, j-1) for (i, j) in blocked_cells]\n    \n    # Initialize the visited matrix\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    # Define the four possible directions of movement\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Queue for BFS, starting from (0, 0)\n    queue = deque()\n    queue.append((0, 0))\n    visited[0][0] = True\n    \n    # Perform BFS\n    while queue:\n        x, y = queue.popleft()\n        \n        # Check if we have reached the target cell\n        if x == n - 1 and y == m - 1:\n            return True\n        \n        # Explore all four possible directions\n        for dx, dy in directions:\n            nx = x + dx\n            ny = y + dy\n            \n            # Check if the next cell is within the grid bounds\n            if 0 <= nx < n and 0 <= ny < m:\n                # Check if the next cell is unvisited and not blocked\n                if not visited[nx][ny] and (nx, ny) not in blocked:\n                    visited[nx][ny] = True\n                    queue.append((nx, ny))\n    \n    # If the target is not reachable\n    return False",
  "tests": "from solution import is_path_possible\n\ndef test_no_path_due_to_blockage():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2), (3, 2)]) == False\n\ndef test_path_exists():\n    assert is_path_possible(3, 3, [(1, 2), (2, 2)]) == True\n\ndef test_no_blockages():\n    assert is_path_possible(3, 3, []) == True\n\ndef test_start_is_blocked():\n    assert is_path_possible(3, 3, [(1, 1), (2, 2)]) == False\n\ndef test_end_is_blocked():\n    assert is_path_possible(3, 3, [(3, 3)]) == False\n\ndef test_smallest_grid_blocked():\n    assert is_path_possible(1, 1, [(1, 1)]) == False\n\ndef test_smallest_grid_unblocked():\n    assert is_path_possible(1, 1, []) == True\n\ndef test_large_grid_with_one_blockage():\n    assert is_path_possible(1000, 1000, [(500, 500)]) == True\n\ndef test_no_path_in_large_blocked_grid():\n    blocked_cells = [(i, 1) for i in range(1, 1001)]\n    assert is_path_possible(1000, 1000, blocked_cells) == False"
}